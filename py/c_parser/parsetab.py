
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocIFXnonassocELSEright=leftORleftANDleft|left^left&nonassoc<>EQNEQLEGEleftSHLSHRleft+-left*/%AND EQ FLOAT GE ID INTEGER LE NEQ OR SHL SHR STRING TYPE BREAK CONTINUE IF ELSE RETURN WHILE FORprogram : ext_declarations fundefs instructionsext_declarations : declarationsdeclarations : declarations declarationdeclarations : declarationdeclarations :declaration : fundefsdeclaration : TYPE inits ';'declaration : error ';'inits : inits ',' initinits : initinit : ID '=' expressioninstructions : instructions instructioninstructions : instructioninstruction : labeled_instr\n        | assignment ';'\n        | declaration\n        | choice_instr\n        | while_instr\n        | for_instr\n        | return_instr\n        | break_instr\n        | continue_instr\n        | compound_instr\n        | statement\n        | expression ';'statement : ID '(' expr_list_or_empty ')' ';'labeled_instr : ID ':' instructionassignment : ID '=' expressionassignment : ID '=' error ';'choice_instr : IF '(' condition ')' instruction  %prec IFXchoice_instr : IF '(' condition ')' instruction ELSE instructionchoice_instr : IF '(' error ')' instruction  %prec IFXchoice_instr : IF '(' error ')' instruction ELSE instructionwhile_instr : WHILE '(' condition ')' instructionfor_instr : FOR '(' instruction expression ';' assignment ')' instructionfor_instr : FOR '(' error ')' instructionwhile_instr : WHILE '(' error ')' instructionreturn_instr : RETURN expression ';'continue_instr : CONTINUE ';'break_instr : BREAK ';'compound_instr : '{' declarations instructions '}'compound_instr : '{' '}'condition : expressionconst : INTEGERconst : FLOATconst : STRINGexpression : constexpression : IDexpression : '(' expression ')'expression : '(' error ')'expression : ID '(' expr_list_or_empty ')'expression : ID '(' error ')'expression : expression '+' expression\n        | expression '-' expression\n        | expression '*' expression\n        | expression '/' expression\n        | expression '%' expression\n        | expression '|' expression\n        | expression '&' expression\n        | expression '^' expression\n        | expression AND expression\n        | expression OR expression\n        | expression SHL expression\n        | expression SHR expression\n        | expression EQ expression\n        | expression NEQ expression\n        | expression '>' expression\n        | expression '<' expression\n        | expression LE expression\n        | expression GE expressionexpr_list_or_empty : expr_listexpr_list_or_empty :expr_list : expr_list ',' expressionexpr_list : expressionfundefs : fundefs fundeffundefs : fundeffundefs :fundef : TYPE ID '(' args_list_or_empty ')' compound_instrargs_list_or_empty : args_list\n        |args_list : args_list ',' argargs_list : argarg : TYPE ID"
    
_lr_action_items = {'TYPE':([0,2,3,4,5,8,9,11,12,16,17,18,19,23,24,26,27,28,29,30,31,32,33,41,47,49,51,52,58,59,80,82,83,84,85,93,128,129,130,133,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[6,10,10,6,-4,-76,20,-75,-3,-8,6,-75,-13,-23,-14,-16,-17,-18,-19,-20,-21,-22,-24,6,-7,88,-12,6,-15,-25,6,-40,-39,6,-42,-27,-38,6,-3,88,6,6,6,6,6,-41,-78,-26,-30,-32,-34,-37,-36,6,6,-31,-33,6,-35,]),'error':([0,2,3,4,5,8,9,11,12,16,17,18,19,22,23,24,26,27,28,29,30,31,32,33,41,47,51,52,53,54,58,59,78,79,80,82,83,84,85,93,102,128,129,130,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[7,-77,-6,7,-4,-76,7,-75,-3,-8,7,-75,-13,56,-23,-14,-16,-17,-18,-19,-20,-21,-22,-24,7,-7,-12,7,95,97,-15,-25,122,125,127,-40,-39,7,-42,-27,97,-38,7,-3,7,7,7,7,7,-41,-78,-26,-30,-32,-34,-37,-36,7,7,-31,-33,7,-35,]),'ID':([0,2,3,4,5,6,8,9,10,11,12,16,17,18,19,20,22,23,24,26,27,28,29,30,31,32,33,38,41,47,48,50,51,52,53,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,88,93,102,126,128,129,130,137,139,140,141,142,144,145,146,148,151,152,153,154,155,156,157,158,161,162,163,164,],[-5,-77,-6,-2,-4,14,-76,21,46,-75,-3,-8,21,-75,-13,14,57,-23,-14,-16,-17,-18,-19,-20,-21,-22,-24,57,-5,-7,87,57,-12,21,57,57,-15,-25,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,21,-40,-39,21,-42,131,-27,57,57,-38,21,-3,57,21,21,21,21,21,-41,-78,-26,-30,-32,-34,-37,160,-36,21,21,-31,-33,21,-35,]),'IF':([0,2,3,4,5,8,9,11,12,16,17,18,19,23,24,26,27,28,29,30,31,32,33,41,47,51,52,58,59,80,82,83,84,85,93,128,129,130,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-77,-6,-2,-4,-76,35,-75,-3,-8,35,-75,-13,-23,-14,-16,-17,-18,-19,-20,-21,-22,-24,-5,-7,-12,35,-15,-25,35,-40,-39,35,-42,-27,-38,35,-3,35,35,35,35,35,-41,-78,-26,-30,-32,-34,-37,-36,35,35,-31,-33,35,-35,]),'WHILE':([0,2,3,4,5,8,9,11,12,16,17,18,19,23,24,26,27,28,29,30,31,32,33,41,47,51,52,58,59,80,82,83,84,85,93,128,129,130,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-77,-6,-2,-4,-76,36,-75,-3,-8,36,-75,-13,-23,-14,-16,-17,-18,-19,-20,-21,-22,-24,-5,-7,-12,36,-15,-25,36,-40,-39,36,-42,-27,-38,36,-3,36,36,36,36,36,-41,-78,-26,-30,-32,-34,-37,-36,36,36,-31,-33,36,-35,]),'FOR':([0,2,3,4,5,8,9,11,12,16,17,18,19,23,24,26,27,28,29,30,31,32,33,41,47,51,52,58,59,80,82,83,84,85,93,128,129,130,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-77,-6,-2,-4,-76,37,-75,-3,-8,37,-75,-13,-23,-14,-16,-17,-18,-19,-20,-21,-22,-24,-5,-7,-12,37,-15,-25,37,-40,-39,37,-42,-27,-38,37,-3,37,37,37,37,37,-41,-78,-26,-30,-32,-34,-37,-36,37,37,-31,-33,37,-35,]),'RETURN':([0,2,3,4,5,8,9,11,12,16,17,18,19,23,24,26,27,28,29,30,31,32,33,41,47,51,52,58,59,80,82,83,84,85,93,128,129,130,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-77,-6,-2,-4,-76,38,-75,-3,-8,38,-75,-13,-23,-14,-16,-17,-18,-19,-20,-21,-22,-24,-5,-7,-12,38,-15,-25,38,-40,-39,38,-42,-27,-38,38,-3,38,38,38,38,38,-41,-78,-26,-30,-32,-34,-37,-36,38,38,-31,-33,38,-35,]),'BREAK':([0,2,3,4,5,8,9,11,12,16,17,18,19,23,24,26,27,28,29,30,31,32,33,41,47,51,52,58,59,80,82,83,84,85,93,128,129,130,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-77,-6,-2,-4,-76,39,-75,-3,-8,39,-75,-13,-23,-14,-16,-17,-18,-19,-20,-21,-22,-24,-5,-7,-12,39,-15,-25,39,-40,-39,39,-42,-27,-38,39,-3,39,39,39,39,39,-41,-78,-26,-30,-32,-34,-37,-36,39,39,-31,-33,39,-35,]),'CONTINUE':([0,2,3,4,5,8,9,11,12,16,17,18,19,23,24,26,27,28,29,30,31,32,33,41,47,51,52,58,59,80,82,83,84,85,93,128,129,130,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-77,-6,-2,-4,-76,40,-75,-3,-8,40,-75,-13,-23,-14,-16,-17,-18,-19,-20,-21,-22,-24,-5,-7,-12,40,-15,-25,40,-40,-39,40,-42,-27,-38,40,-3,40,40,40,40,40,-41,-78,-26,-30,-32,-34,-37,-36,40,40,-31,-33,40,-35,]),'{':([0,2,3,4,5,8,9,11,12,16,17,18,19,23,24,26,27,28,29,30,31,32,33,41,47,51,52,58,59,80,82,83,84,85,93,128,129,130,132,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-77,-6,-2,-4,-76,41,-75,-3,-8,41,-75,-13,-23,-14,-16,-17,-18,-19,-20,-21,-22,-24,-5,-7,-12,41,-15,-25,41,-40,-39,41,-42,-27,-38,41,-3,41,41,41,41,41,41,-41,-78,-26,-30,-32,-34,-37,-36,41,41,-31,-33,41,-35,]),'(':([0,2,3,4,5,8,9,11,12,14,16,17,18,19,21,22,23,24,26,27,28,29,30,31,32,33,35,36,37,38,41,46,47,50,51,52,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,93,102,126,128,129,130,137,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-77,-6,-2,-4,-76,22,-75,-3,49,-8,22,-75,-13,54,22,-23,-14,-16,-17,-18,-19,-20,-21,-22,-24,78,79,80,22,-5,49,-7,22,-12,22,22,22,102,-15,-25,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-40,-39,22,-42,-27,22,22,-38,22,-3,22,22,22,22,22,22,-41,-78,-26,-30,-32,-34,-37,-36,22,22,-31,-33,22,-35,]),'INTEGER':([0,2,3,4,5,8,9,11,12,16,17,18,19,22,23,24,26,27,28,29,30,31,32,33,38,41,47,50,51,52,53,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,93,102,126,128,129,130,137,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-77,-6,-2,-4,-76,43,-75,-3,-8,43,-75,-13,43,-23,-14,-16,-17,-18,-19,-20,-21,-22,-24,43,-5,-7,43,-12,43,43,43,-15,-25,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-40,-39,43,-42,-27,43,43,-38,43,-3,43,43,43,43,43,43,-41,-78,-26,-30,-32,-34,-37,-36,43,43,-31,-33,43,-35,]),'FLOAT':([0,2,3,4,5,8,9,11,12,16,17,18,19,22,23,24,26,27,28,29,30,31,32,33,38,41,47,50,51,52,53,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,93,102,126,128,129,130,137,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-77,-6,-2,-4,-76,44,-75,-3,-8,44,-75,-13,44,-23,-14,-16,-17,-18,-19,-20,-21,-22,-24,44,-5,-7,44,-12,44,44,44,-15,-25,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-40,-39,44,-42,-27,44,44,-38,44,-3,44,44,44,44,44,44,-41,-78,-26,-30,-32,-34,-37,-36,44,44,-31,-33,44,-35,]),'STRING':([0,2,3,4,5,8,9,11,12,16,17,18,19,22,23,24,26,27,28,29,30,31,32,33,38,41,47,50,51,52,53,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,93,102,126,128,129,130,137,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-77,-6,-2,-4,-76,45,-75,-3,-8,45,-75,-13,45,-23,-14,-16,-17,-18,-19,-20,-21,-22,-24,45,-5,-7,45,-12,45,45,45,-15,-25,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-40,-39,45,-42,-27,45,45,-38,45,-3,45,45,45,45,45,45,-41,-78,-26,-30,-32,-34,-37,-36,45,45,-31,-33,45,-35,]),'$end':([0,1,2,3,4,5,8,9,11,12,16,17,18,19,23,24,26,27,28,29,30,31,32,33,47,51,52,58,59,82,83,85,93,128,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,0,-77,-6,-2,-4,-76,-77,-75,-3,-8,-1,-75,-13,-23,-14,-16,-17,-18,-19,-20,-21,-22,-24,-7,-12,-77,-15,-25,-40,-39,-42,-27,-38,-77,-77,-77,-77,-77,-41,-78,-26,-30,-32,-34,-37,-36,-77,-77,-31,-33,-77,-35,]),'}':([3,5,8,11,16,19,23,24,26,27,28,29,30,31,32,33,41,47,51,52,58,59,82,83,84,85,93,128,129,130,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-6,-4,-76,-75,-8,-13,-23,-14,-16,-17,-18,-19,-20,-21,-22,-24,85,-7,-12,-77,-15,-25,-40,-39,-77,-42,-27,-38,145,-3,-77,-77,-77,-77,-77,-41,-78,-26,-30,-32,-34,-37,-36,-77,-77,-31,-33,-77,-35,]),'ELSE':([3,8,11,16,23,24,26,27,28,29,30,31,32,33,47,52,58,59,82,83,85,93,128,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-6,-76,-75,-8,-23,-14,-16,-17,-18,-19,-20,-21,-22,-24,-7,-77,-15,-25,-40,-39,-42,-27,-38,-77,-77,-77,-77,-77,-41,-78,-26,157,158,-34,-37,-36,-77,-77,-31,-33,-77,-35,]),';':([7,13,15,21,25,34,39,40,42,43,44,45,57,81,86,92,94,95,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,127,134,135,136,143,150,],[16,47,-10,-48,58,59,82,83,-47,-44,-45,-46,-48,128,-9,-11,-28,134,-49,-50,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,16,-29,148,-52,155,-51,]),',':([13,15,42,43,44,45,57,86,90,91,92,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,131,136,147,149,150,],[48,-10,-47,-44,-45,-46,-48,-9,133,-82,-11,137,-74,-49,-50,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-83,-52,-81,-73,-51,]),'=':([14,21,87,160,],[50,53,50,53,]),':':([21,],[52,]),'+':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-48,60,-47,-44,-45,-46,60,-48,60,60,60,60,-49,-50,-53,-54,-55,-56,-57,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-51,-52,60,60,-51,]),'-':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-48,61,-47,-44,-45,-46,61,-48,61,61,61,61,-49,-50,-53,-54,-55,-56,-57,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-51,-52,61,61,-51,]),'*':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-48,62,-47,-44,-45,-46,62,-48,62,62,62,62,-49,-50,62,62,-55,-56,-57,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-51,-52,62,62,-51,]),'/':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-48,63,-47,-44,-45,-46,63,-48,63,63,63,63,-49,-50,63,63,-55,-56,-57,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-51,-52,63,63,-51,]),'%':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-48,64,-47,-44,-45,-46,64,-48,64,64,64,64,-49,-50,64,64,-55,-56,-57,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-51,-52,64,64,-51,]),'|':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-48,65,-47,-44,-45,-46,65,-48,65,65,65,65,-49,-50,-53,-54,-55,-56,-57,-58,-59,-60,65,65,-63,-64,-65,-66,-67,-68,-69,-70,65,-51,-52,65,65,-51,]),'&':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-48,66,-47,-44,-45,-46,66,-48,66,66,66,66,-49,-50,-53,-54,-55,-56,-57,66,-59,66,66,66,-63,-64,-65,-66,-67,-68,-69,-70,66,-51,-52,66,66,-51,]),'^':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-48,67,-47,-44,-45,-46,67,-48,67,67,67,67,-49,-50,-53,-54,-55,-56,-57,67,-59,-60,67,67,-63,-64,-65,-66,-67,-68,-69,-70,67,-51,-52,67,67,-51,]),'AND':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-48,68,-47,-44,-45,-46,68,-48,68,68,68,68,-49,-50,-53,-54,-55,-56,-57,-58,-59,-60,-61,68,-63,-64,-65,-66,-67,-68,-69,-70,68,-51,-52,68,68,-51,]),'OR':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-48,69,-47,-44,-45,-46,69,-48,69,69,69,69,-49,-50,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,69,-51,-52,69,69,-51,]),'SHL':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-48,70,-47,-44,-45,-46,70,-48,70,70,70,70,-49,-50,-53,-54,-55,-56,-57,70,70,70,70,70,-63,-64,70,70,70,70,70,70,70,-51,-52,70,70,-51,]),'SHR':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-48,71,-47,-44,-45,-46,71,-48,71,71,71,71,-49,-50,-53,-54,-55,-56,-57,71,71,71,71,71,-63,-64,71,71,71,71,71,71,71,-51,-52,71,71,-51,]),'EQ':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-48,72,-47,-44,-45,-46,72,-48,72,72,72,72,-49,-50,-53,-54,-55,-56,-57,72,72,72,72,72,-63,-64,None,None,None,None,None,None,72,-51,-52,72,72,-51,]),'NEQ':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-48,73,-47,-44,-45,-46,73,-48,73,73,73,73,-49,-50,-53,-54,-55,-56,-57,73,73,73,73,73,-63,-64,None,None,None,None,None,None,73,-51,-52,73,73,-51,]),'>':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-48,74,-47,-44,-45,-46,74,-48,74,74,74,74,-49,-50,-53,-54,-55,-56,-57,74,74,74,74,74,-63,-64,None,None,None,None,None,None,74,-51,-52,74,74,-51,]),'<':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-48,75,-47,-44,-45,-46,75,-48,75,75,75,75,-49,-50,-53,-54,-55,-56,-57,75,75,75,75,75,-63,-64,None,None,None,None,None,None,75,-51,-52,75,75,-51,]),'LE':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-48,76,-47,-44,-45,-46,76,-48,76,76,76,76,-49,-50,-53,-54,-55,-56,-57,76,76,76,76,76,-63,-64,None,None,None,None,None,None,76,-51,-52,76,76,-51,]),'GE':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-48,77,-47,-44,-45,-46,77,-48,77,77,77,77,-49,-50,-53,-54,-55,-56,-57,77,77,77,77,77,-63,-64,None,None,None,None,None,None,77,-51,-52,77,77,-51,]),')':([42,43,44,45,49,54,55,56,57,89,90,91,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,131,134,136,138,147,149,150,159,],[-47,-44,-45,-46,-80,-72,100,101,-48,132,-79,-82,-28,135,136,-71,-74,-49,-50,-72,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,139,140,-43,141,142,144,-83,-29,-52,150,-81,-73,-51,163,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'ext_declarations':([0,],[2,]),'fundefs':([0,2,4,9,17,41,52,80,84,129,139,140,141,142,144,157,158,163,],[3,9,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'declarations':([0,41,],[4,84,]),'declaration':([0,4,9,17,41,52,80,84,129,139,140,141,142,144,157,158,163,],[5,12,26,26,5,26,26,130,26,26,26,26,26,26,26,26,26,]),'fundef':([0,2,3,4,9,17,41,52,80,84,129,139,140,141,142,144,157,158,163,],[8,8,11,8,18,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'inits':([6,20,],[13,13,]),'init':([6,20,48,],[15,15,86,]),'instructions':([9,84,],[17,129,]),'instruction':([9,17,52,80,84,129,139,140,141,142,144,157,158,163,],[19,51,93,126,19,51,151,152,153,154,156,161,162,164,]),'compound_instr':([9,17,52,80,84,129,132,139,140,141,142,144,157,158,163,],[23,23,23,23,23,23,146,23,23,23,23,23,23,23,23,]),'labeled_instr':([9,17,52,80,84,129,139,140,141,142,144,157,158,163,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'assignment':([9,17,52,80,84,129,139,140,141,142,144,155,157,158,163,],[25,25,25,25,25,25,25,25,25,25,25,159,25,25,25,]),'choice_instr':([9,17,52,80,84,129,139,140,141,142,144,157,158,163,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'while_instr':([9,17,52,80,84,129,139,140,141,142,144,157,158,163,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'for_instr':([9,17,52,80,84,129,139,140,141,142,144,157,158,163,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'return_instr':([9,17,52,80,84,129,139,140,141,142,144,157,158,163,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'break_instr':([9,17,52,80,84,129,139,140,141,142,144,157,158,163,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'continue_instr':([9,17,52,80,84,129,139,140,141,142,144,157,158,163,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'statement':([9,17,52,80,84,129,139,140,141,142,144,157,158,163,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'expression':([9,17,22,38,50,52,53,54,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,102,126,129,137,139,140,141,142,144,157,158,163,],[34,34,55,81,92,34,94,99,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,123,34,34,99,143,34,149,34,34,34,34,34,34,34,34,]),'const':([9,17,22,38,50,52,53,54,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,102,126,129,137,139,140,141,142,144,157,158,163,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'args_list_or_empty':([49,],[89,]),'args_list':([49,],[90,]),'arg':([49,133,],[91,147,]),'expr_list_or_empty':([54,102,],[96,138,]),'expr_list':([54,102,],[98,98,]),'condition':([78,79,],[121,124,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> ext_declarations fundefs instructions','program',3,'p_program','Cparser.py',54),
  ('ext_declarations -> declarations','ext_declarations',1,'p_ext_declarations','Cparser.py',59),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','Cparser.py',63),
  ('declarations -> declaration','declarations',1,'p_declarations_single','Cparser.py',70),
  ('declarations -> <empty>','declarations',0,'p_declaration_blank','Cparser.py',77),
  ('declaration -> fundefs','declaration',1,'p_declaration_fundef','Cparser.py',81),
  ('declaration -> TYPE inits ;','declaration',3,'p_declaration','Cparser.py',85),
  ('declaration -> error ;','declaration',2,'p_declaration_error','Cparser.py',89),
  ('inits -> inits , init','inits',3,'p_inits','Cparser.py',93),
  ('inits -> init','inits',1,'p_inits_single','Cparser.py',97),
  ('init -> ID = expression','init',3,'p_init','Cparser.py',101),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Cparser.py',105),
  ('instructions -> instruction','instructions',1,'p_instructions_single','Cparser.py',112),
  ('instruction -> labeled_instr','instruction',1,'p_instruction','Cparser.py',119),
  ('instruction -> assignment ;','instruction',2,'p_instruction','Cparser.py',120),
  ('instruction -> declaration','instruction',1,'p_instruction','Cparser.py',121),
  ('instruction -> choice_instr','instruction',1,'p_instruction','Cparser.py',122),
  ('instruction -> while_instr','instruction',1,'p_instruction','Cparser.py',123),
  ('instruction -> for_instr','instruction',1,'p_instruction','Cparser.py',124),
  ('instruction -> return_instr','instruction',1,'p_instruction','Cparser.py',125),
  ('instruction -> break_instr','instruction',1,'p_instruction','Cparser.py',126),
  ('instruction -> continue_instr','instruction',1,'p_instruction','Cparser.py',127),
  ('instruction -> compound_instr','instruction',1,'p_instruction','Cparser.py',128),
  ('instruction -> statement','instruction',1,'p_instruction','Cparser.py',129),
  ('instruction -> expression ;','instruction',2,'p_instruction','Cparser.py',130),
  ('statement -> ID ( expr_list_or_empty ) ;','statement',5,'p_fun_call','Cparser.py',134),
  ('labeled_instr -> ID : instruction','labeled_instr',3,'p_labeled_instr','Cparser.py',138),
  ('assignment -> ID = expression','assignment',3,'p_assignment','Cparser.py',142),
  ('assignment -> ID = error ;','assignment',4,'p_assignment_error','Cparser.py',149),
  ('choice_instr -> IF ( condition ) instruction','choice_instr',5,'p_choice_instr','Cparser.py',153),
  ('choice_instr -> IF ( condition ) instruction ELSE instruction','choice_instr',7,'p_choice_instr_else','Cparser.py',157),
  ('choice_instr -> IF ( error ) instruction','choice_instr',5,'p_choice_instr_error','Cparser.py',161),
  ('choice_instr -> IF ( error ) instruction ELSE instruction','choice_instr',7,'p_choice_instr_else_error','Cparser.py',165),
  ('while_instr -> WHILE ( condition ) instruction','while_instr',5,'p_while_instr','Cparser.py',169),
  ('for_instr -> FOR ( instruction expression ; assignment ) instruction','for_instr',8,'p_for_instr','Cparser.py',173),
  ('for_instr -> FOR ( error ) instruction','for_instr',5,'p_for_error','Cparser.py',177),
  ('while_instr -> WHILE ( error ) instruction','while_instr',5,'p_while_error','Cparser.py',181),
  ('return_instr -> RETURN expression ;','return_instr',3,'p_return_instr','Cparser.py',185),
  ('continue_instr -> CONTINUE ;','continue_instr',2,'p_continue_instr','Cparser.py',189),
  ('break_instr -> BREAK ;','break_instr',2,'p_break_instr','Cparser.py',193),
  ('compound_instr -> { declarations instructions }','compound_instr',4,'p_compound_instr','Cparser.py',197),
  ('compound_instr -> { }','compound_instr',2,'p_compound_instr2','Cparser.py',201),
  ('condition -> expression','condition',1,'p_condition','Cparser.py',205),
  ('const -> INTEGER','const',1,'p_const_integer','Cparser.py',209),
  ('const -> FLOAT','const',1,'p_const_float','Cparser.py',213),
  ('const -> STRING','const',1,'p_const_string','Cparser.py',217),
  ('expression -> const','expression',1,'p_expression_const','Cparser.py',221),
  ('expression -> ID','expression',1,'p_expression_id','Cparser.py',225),
  ('expression -> ( expression )','expression',3,'p_expression_brackets','Cparser.py',229),
  ('expression -> ( error )','expression',3,'p_expression_brackets_error','Cparser.py',233),
  ('expression -> ID ( expr_list_or_empty )','expression',4,'p_expression_fun_call','Cparser.py',237),
  ('expression -> ID ( error )','expression',4,'p_expression_fun_call_error','Cparser.py',241),
  ('expression -> expression + expression','expression',3,'p_expression_binary_op','Cparser.py',245),
  ('expression -> expression - expression','expression',3,'p_expression_binary_op','Cparser.py',246),
  ('expression -> expression * expression','expression',3,'p_expression_binary_op','Cparser.py',247),
  ('expression -> expression / expression','expression',3,'p_expression_binary_op','Cparser.py',248),
  ('expression -> expression % expression','expression',3,'p_expression_binary_op','Cparser.py',249),
  ('expression -> expression | expression','expression',3,'p_expression_binary_op','Cparser.py',250),
  ('expression -> expression & expression','expression',3,'p_expression_binary_op','Cparser.py',251),
  ('expression -> expression ^ expression','expression',3,'p_expression_binary_op','Cparser.py',252),
  ('expression -> expression AND expression','expression',3,'p_expression_binary_op','Cparser.py',253),
  ('expression -> expression OR expression','expression',3,'p_expression_binary_op','Cparser.py',254),
  ('expression -> expression SHL expression','expression',3,'p_expression_binary_op','Cparser.py',255),
  ('expression -> expression SHR expression','expression',3,'p_expression_binary_op','Cparser.py',256),
  ('expression -> expression EQ expression','expression',3,'p_expression_binary_op','Cparser.py',257),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binary_op','Cparser.py',258),
  ('expression -> expression > expression','expression',3,'p_expression_binary_op','Cparser.py',259),
  ('expression -> expression < expression','expression',3,'p_expression_binary_op','Cparser.py',260),
  ('expression -> expression LE expression','expression',3,'p_expression_binary_op','Cparser.py',261),
  ('expression -> expression GE expression','expression',3,'p_expression_binary_op','Cparser.py',262),
  ('expr_list_or_empty -> expr_list','expr_list_or_empty',1,'p_expr_list_non_empty','Cparser.py',267),
  ('expr_list_or_empty -> <empty>','expr_list_or_empty',0,'p_expr_list_empty','Cparser.py',271),
  ('expr_list -> expr_list , expression','expr_list',3,'p_expr_list','Cparser.py',275),
  ('expr_list -> expression','expr_list',1,'p_expr_list_single','Cparser.py',279),
  ('fundefs -> fundefs fundef','fundefs',2,'p_fundefs','Cparser.py',291),
  ('fundefs -> fundef','fundefs',1,'p_fundefs_single','Cparser.py',295),
  ('fundefs -> <empty>','fundefs',0,'p_fundefs_empty','Cparser.py',299),
  ('fundef -> TYPE ID ( args_list_or_empty ) compound_instr','fundef',6,'p_fundef','Cparser.py',303),
  ('args_list_or_empty -> args_list','args_list_or_empty',1,'p_args_list_or_empty','Cparser.py',307),
  ('args_list_or_empty -> <empty>','args_list_or_empty',0,'p_args_list_or_empty','Cparser.py',308),
  ('args_list -> args_list , arg','args_list',3,'p_args_list','Cparser.py',323),
  ('args_list -> arg','args_list',1,'p_args_list_single','Cparser.py',327),
  ('arg -> TYPE ID','arg',2,'p_arg','Cparser.py',331),
]
