
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocIFXnonassocELSEright=leftORleftANDleft|left^left&nonassoc<>EQNEQLEGEleftSHLSHRleft+-left*/%AND EQ FLOAT GE ID INTEGER LE NEQ OR SHL SHR STRING TYPE BREAK CONTINUE IF ELSE RETURN WHILE FORprogram : ext_declarationsext_declarations : declarationsarray : '[' INTEGER ']'declarations : declarations declarationdeclarations : declarationdeclarations :declaration : fundefsdeclaration : TYPE inits ';'declaration : error ';'inits : inits ',' initinits : initinit : ID '=' expressioninit : IDinit : ID arrayinit : '*' IDinit : '*' ID '=' expressioninstructions : instructions instructioninstructions : instructioninstruction : labeled_instr\n        | assignment ';'\n        | declaration\n        | choice_instr\n        | while_instr\n        | for_instr\n        | return_instr\n        | break_instr\n        | continue_instr\n        | compound_instr\n        | statement\n        | expression ';'statement : ID '(' expr_list_or_empty ')' ';'labeled_instr : ID ':' instructionassignment : ID '=' expressionassignment : ID array '=' expressionassignment : ID '=' error ';'choice_instr : IF '(' condition ')' instruction  %prec IFXchoice_instr : IF '(' condition ')' instruction ELSE instructionchoice_instr : IF '(' error ')' instruction  %prec IFXchoice_instr : IF '(' error ')' instruction ELSE instructionwhile_instr : WHILE '(' condition ')' instructionfor_instr : FOR '(' instruction expression ';' assignment ')' instructionfor_instr : FOR '(' error ')' instructionwhile_instr : WHILE '(' error ')' instructionreturn_instr : RETURN expression ';'continue_instr : CONTINUE ';'break_instr : BREAK ';'compound_instr : '{' instructions '}'compound_instr : '{' '}'condition : expressionconst : INTEGERconst : FLOATconst : STRINGexpression : constexpression : IDexpression : '&' IDexpression : '*' IDexpression : ID arrayexpression : '(' expression ')'expression : '(' error ')'expression : ID '(' expr_list_or_empty ')'expression : ID '(' error ')'expression : expression '+' expression\n        | expression '-' expression\n        | expression '*' expression\n        | expression '/' expression\n        | expression '%' expression\n        | expression '|' expression\n        | expression '&' expression\n        | expression '^' expression\n        | expression AND expression\n        | expression OR expression\n        | expression SHL expression\n        | expression SHR expression\n        | expression EQ expression\n        | expression NEQ expression\n        | expression '>' expression\n        | expression '<' expression\n        | expression LE expression\n        | expression GE expressionexpr_list_or_empty : expr_listexpr_list_or_empty :expr_list : expr_list ',' expressionexpr_list : expressionfundefs : fundefs fundeffundefs : fundeffundefs :fundef : TYPE ID '(' args_list_or_empty ')' compound_instrargs_list_or_empty : args_list\n        |args_list : args_list ',' argargs_list : argarg : TYPE ID"
    
_lr_action_items = {'TYPE':([0,3,4,5,8,9,10,16,18,20,44,71,72,98,99,100,101,103,104,105,106,107,108,109,110,111,123,124,125,126,127,133,135,136,138,150,154,155,156,157,159,160,161,162,163,164,166,167,168,171,172,173,175,],[6,6,-5,11,-85,-4,-84,-9,-8,27,27,-87,6,6,-48,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-47,-17,-20,-30,6,6,-46,-45,-32,-44,6,6,6,6,6,-31,-36,-38,-40,-43,-42,6,6,-37,-39,6,-41,]),'error':([0,3,4,5,8,9,10,16,18,36,46,71,72,98,99,100,101,103,104,105,106,107,108,109,110,111,123,124,125,126,127,128,130,131,132,133,135,136,138,150,154,155,156,157,159,160,161,162,163,164,166,167,168,171,172,173,175,],[7,7,-5,-7,-85,-4,-84,-9,-8,68,75,-87,7,7,-48,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-47,-17,-20,-30,7,140,75,144,147,149,-46,-45,-32,-44,7,7,7,7,7,-31,-36,-38,-40,-43,-42,7,7,-37,-39,7,-41,]),'$end':([0,1,2,3,4,5,8,9,10,16,18,71,99,123,],[-6,0,-1,-2,-5,-7,-85,-4,-84,-9,-8,-87,-48,-47,]),'}':([5,8,10,16,18,71,72,98,99,100,101,103,104,105,106,107,108,109,110,111,123,124,125,126,127,135,136,138,150,154,155,156,157,159,160,161,162,163,164,166,167,168,171,172,173,175,],[-7,-85,-84,-9,-8,-87,99,123,-48,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-47,-17,-20,-30,-86,-46,-45,-32,-44,-86,-86,-86,-86,-86,-31,-36,-38,-40,-43,-42,-86,-86,-37,-39,-86,-41,]),'ID':([5,6,8,10,11,15,16,18,19,21,27,34,35,36,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,71,72,98,99,100,101,103,104,105,106,107,108,109,110,111,117,122,123,124,125,126,127,128,130,131,132,133,135,136,138,141,148,150,154,155,156,157,159,160,161,162,163,164,165,166,167,168,171,172,173,175,],[-7,13,-85,-84,17,24,-9,-8,26,31,42,65,66,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-87,113,113,-48,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,31,31,-47,-17,-20,-30,113,31,31,31,31,113,-46,-45,-32,31,31,-44,113,113,113,113,113,-31,-36,-38,-40,-43,170,-42,113,113,-37,-39,113,-41,]),'IF':([5,8,10,16,18,71,72,98,99,100,101,103,104,105,106,107,108,109,110,111,123,124,125,126,127,133,135,136,138,150,154,155,156,157,159,160,161,162,163,164,166,167,168,171,172,173,175,],[-7,-85,-84,-9,-8,-87,114,114,-48,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-47,-17,-20,-30,114,114,-46,-45,-32,-44,114,114,114,114,114,-31,-36,-38,-40,-43,-42,114,114,-37,-39,114,-41,]),'WHILE':([5,8,10,16,18,71,72,98,99,100,101,103,104,105,106,107,108,109,110,111,123,124,125,126,127,133,135,136,138,150,154,155,156,157,159,160,161,162,163,164,166,167,168,171,172,173,175,],[-7,-85,-84,-9,-8,-87,115,115,-48,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-47,-17,-20,-30,115,115,-46,-45,-32,-44,115,115,115,115,115,-31,-36,-38,-40,-43,-42,115,115,-37,-39,115,-41,]),'FOR':([5,8,10,16,18,71,72,98,99,100,101,103,104,105,106,107,108,109,110,111,123,124,125,126,127,133,135,136,138,150,154,155,156,157,159,160,161,162,163,164,166,167,168,171,172,173,175,],[-7,-85,-84,-9,-8,-87,116,116,-48,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-47,-17,-20,-30,116,116,-46,-45,-32,-44,116,116,116,116,116,-31,-36,-38,-40,-43,-42,116,116,-37,-39,116,-41,]),'RETURN':([5,8,10,16,18,71,72,98,99,100,101,103,104,105,106,107,108,109,110,111,123,124,125,126,127,133,135,136,138,150,154,155,156,157,159,160,161,162,163,164,166,167,168,171,172,173,175,],[-7,-85,-84,-9,-8,-87,117,117,-48,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-47,-17,-20,-30,117,117,-46,-45,-32,-44,117,117,117,117,117,-31,-36,-38,-40,-43,-42,117,117,-37,-39,117,-41,]),'BREAK':([5,8,10,16,18,71,72,98,99,100,101,103,104,105,106,107,108,109,110,111,123,124,125,126,127,133,135,136,138,150,154,155,156,157,159,160,161,162,163,164,166,167,168,171,172,173,175,],[-7,-85,-84,-9,-8,-87,118,118,-48,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-47,-17,-20,-30,118,118,-46,-45,-32,-44,118,118,118,118,118,-31,-36,-38,-40,-43,-42,118,118,-37,-39,118,-41,]),'CONTINUE':([5,8,10,16,18,71,72,98,99,100,101,103,104,105,106,107,108,109,110,111,123,124,125,126,127,133,135,136,138,150,154,155,156,157,159,160,161,162,163,164,166,167,168,171,172,173,175,],[-7,-85,-84,-9,-8,-87,119,119,-48,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-47,-17,-20,-30,119,119,-46,-45,-32,-44,119,119,119,119,119,-31,-36,-38,-40,-43,-42,119,119,-37,-39,119,-41,]),'{':([5,8,10,16,18,43,71,72,98,99,100,101,103,104,105,106,107,108,109,110,111,123,124,125,126,127,133,135,136,138,150,154,155,156,157,159,160,161,162,163,164,166,167,168,171,172,173,175,],[-7,-85,-84,-9,-8,72,-87,72,72,-48,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-47,-17,-20,-30,72,72,-46,-45,-32,-44,72,72,72,72,72,-31,-36,-38,-40,-43,-42,72,72,-37,-39,72,-41,]),'&':([5,8,10,16,18,21,31,32,33,36,37,38,39,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,71,72,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,117,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,141,145,148,150,152,153,154,155,156,157,158,159,160,161,162,163,164,166,167,168,171,172,173,175,],[-7,-85,-84,-9,-8,34,-54,53,-53,34,-50,-51,-52,34,-57,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-55,-56,53,-3,53,-87,34,53,-62,-63,-64,-65,-66,53,-68,53,53,53,-72,-73,-74,-75,-76,-77,-78,-79,-58,-59,34,-48,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,53,-54,34,-60,-61,34,-47,-17,-20,-30,34,34,-57,34,34,34,34,53,-46,-45,53,-32,53,34,53,34,-44,53,-60,34,34,34,34,53,34,-31,-36,-38,-40,-43,-42,34,34,-37,-39,34,-41,]),'*':([5,6,8,10,16,18,19,21,31,32,33,36,37,38,39,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,71,72,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,117,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,141,145,148,150,152,153,154,155,156,157,158,159,160,161,162,163,164,166,167,168,171,172,173,175,],[-7,15,-85,-84,-9,-8,15,35,-54,49,-53,35,-50,-51,-52,35,-57,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-55,-56,49,-3,49,-87,35,49,49,49,-64,-65,-66,49,49,49,49,49,49,49,49,49,49,49,49,49,-58,-59,35,-48,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,49,-54,35,-60,-61,35,-47,-17,-20,-30,35,35,-57,35,35,35,35,49,-46,-45,49,-32,49,35,49,35,-44,49,-60,35,35,35,35,49,35,-31,-36,-38,-40,-43,-42,35,35,-37,-39,35,-41,]),'(':([5,8,10,13,16,17,18,21,31,36,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,71,72,98,99,100,101,103,104,105,106,107,108,109,110,111,113,114,115,116,117,122,123,124,125,126,127,128,130,131,132,133,135,136,138,141,148,150,154,155,156,157,159,160,161,162,163,164,166,167,168,171,172,173,175,],[-7,-85,-84,20,-9,20,-8,36,46,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-87,36,36,-48,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,130,131,132,133,36,36,-47,-17,-20,-30,36,36,36,36,36,36,-46,-45,-32,36,36,-44,36,36,36,36,36,-31,-36,-38,-40,-43,-42,36,36,-37,-39,36,-41,]),'INTEGER':([5,8,10,16,18,21,23,36,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,71,72,98,99,100,101,103,104,105,106,107,108,109,110,111,117,122,123,124,125,126,127,128,130,131,132,133,135,136,138,141,148,150,154,155,156,157,159,160,161,162,163,164,166,167,168,171,172,173,175,],[-7,-85,-84,-9,-8,37,40,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-87,37,37,-48,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,37,37,-47,-17,-20,-30,37,37,37,37,37,37,-46,-45,-32,37,37,-44,37,37,37,37,37,-31,-36,-38,-40,-43,-42,37,37,-37,-39,37,-41,]),'FLOAT':([5,8,10,16,18,21,36,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,71,72,98,99,100,101,103,104,105,106,107,108,109,110,111,117,122,123,124,125,126,127,128,130,131,132,133,135,136,138,141,148,150,154,155,156,157,159,160,161,162,163,164,166,167,168,171,172,173,175,],[-7,-85,-84,-9,-8,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-87,38,38,-48,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,38,38,-47,-17,-20,-30,38,38,38,38,38,38,-46,-45,-32,38,38,-44,38,38,38,38,38,-31,-36,-38,-40,-43,-42,38,38,-37,-39,38,-41,]),'STRING':([5,8,10,16,18,21,36,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,71,72,98,99,100,101,103,104,105,106,107,108,109,110,111,117,122,123,124,125,126,127,128,130,131,132,133,135,136,138,141,148,150,154,155,156,157,159,160,161,162,163,164,166,167,168,171,172,173,175,],[-7,-85,-84,-9,-8,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-87,39,39,-48,-18,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,39,39,-47,-17,-20,-30,39,39,39,39,39,39,-46,-45,-32,39,39,-44,39,39,39,39,39,-31,-36,-38,-40,-43,-42,39,39,-37,-39,39,-41,]),'ELSE':([5,8,10,16,18,71,99,101,103,104,105,106,107,108,109,110,111,123,125,126,127,135,136,138,150,154,155,156,157,159,160,161,162,163,164,166,167,168,171,172,173,175,],[-7,-85,-84,-9,-8,-87,-48,-19,-21,-22,-23,-24,-25,-26,-27,-28,-29,-47,-20,-30,-86,-46,-45,-32,-44,-86,-86,-86,-86,-86,-31,167,168,-40,-43,-42,-86,-86,-37,-39,-86,-41,]),';':([7,12,13,14,22,24,25,26,31,32,33,37,38,39,45,65,66,69,70,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,102,112,113,118,119,120,121,129,134,139,140,149,151,152,153,158,],[16,18,-13,-11,-14,-15,-10,-13,-54,-12,-53,-50,-51,-52,-57,-55,-56,-3,-16,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-58,-59,125,126,-54,135,136,-60,-61,-57,150,-33,151,16,-35,-34,160,165,]),',':([12,13,14,22,24,25,26,29,30,31,32,33,37,38,39,42,45,65,66,69,70,73,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,120,121,137,],[19,-13,-11,-14,-15,-10,-13,44,-91,-54,-12,-53,-50,-51,-52,-92,-57,-55,-56,-3,-16,-90,122,-83,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-58,-59,-60,-61,-82,]),'=':([13,24,26,69,113,129,170,174,],[21,41,21,-3,128,141,128,141,]),'[':([13,26,31,113,170,],[23,23,23,23,23,]),')':([20,28,29,30,31,33,37,38,39,42,45,46,65,66,67,68,69,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,120,121,130,137,139,142,143,144,145,146,147,149,151,152,169,],[-89,43,-88,-91,-54,-53,-50,-51,-52,-92,-57,-81,-55,-56,96,97,-3,-90,120,121,-80,-83,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-58,-59,-60,-61,-81,-82,-33,153,154,155,-49,156,157,159,-35,-34,173,]),'+':([31,32,33,37,38,39,45,65,66,67,69,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,112,113,120,121,129,134,137,139,145,152,153,158,],[-54,47,-53,-50,-51,-52,-57,-55,-56,47,-3,47,47,-62,-63,-64,-65,-66,47,47,47,47,47,47,47,47,47,47,47,47,47,-58,-59,47,-54,-60,-61,-57,47,47,47,47,47,-60,47,]),'-':([31,32,33,37,38,39,45,65,66,67,69,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,112,113,120,121,129,134,137,139,145,152,153,158,],[-54,48,-53,-50,-51,-52,-57,-55,-56,48,-3,48,48,-62,-63,-64,-65,-66,48,48,48,48,48,48,48,48,48,48,48,48,48,-58,-59,48,-54,-60,-61,-57,48,48,48,48,48,-60,48,]),'/':([31,32,33,37,38,39,45,65,66,67,69,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,112,113,120,121,129,134,137,139,145,152,153,158,],[-54,50,-53,-50,-51,-52,-57,-55,-56,50,-3,50,50,50,50,-64,-65,-66,50,50,50,50,50,50,50,50,50,50,50,50,50,-58,-59,50,-54,-60,-61,-57,50,50,50,50,50,-60,50,]),'%':([31,32,33,37,38,39,45,65,66,67,69,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,112,113,120,121,129,134,137,139,145,152,153,158,],[-54,51,-53,-50,-51,-52,-57,-55,-56,51,-3,51,51,51,51,-64,-65,-66,51,51,51,51,51,51,51,51,51,51,51,51,51,-58,-59,51,-54,-60,-61,-57,51,51,51,51,51,-60,51,]),'|':([31,32,33,37,38,39,45,65,66,67,69,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,112,113,120,121,129,134,137,139,145,152,153,158,],[-54,52,-53,-50,-51,-52,-57,-55,-56,52,-3,52,52,-62,-63,-64,-65,-66,-67,-68,-69,52,52,-72,-73,-74,-75,-76,-77,-78,-79,-58,-59,52,-54,-60,-61,-57,52,52,52,52,52,-60,52,]),'^':([31,32,33,37,38,39,45,65,66,67,69,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,112,113,120,121,129,134,137,139,145,152,153,158,],[-54,54,-53,-50,-51,-52,-57,-55,-56,54,-3,54,54,-62,-63,-64,-65,-66,54,-68,-69,54,54,-72,-73,-74,-75,-76,-77,-78,-79,-58,-59,54,-54,-60,-61,-57,54,54,54,54,54,-60,54,]),'AND':([31,32,33,37,38,39,45,65,66,67,69,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,112,113,120,121,129,134,137,139,145,152,153,158,],[-54,55,-53,-50,-51,-52,-57,-55,-56,55,-3,55,55,-62,-63,-64,-65,-66,-67,-68,-69,-70,55,-72,-73,-74,-75,-76,-77,-78,-79,-58,-59,55,-54,-60,-61,-57,55,55,55,55,55,-60,55,]),'OR':([31,32,33,37,38,39,45,65,66,67,69,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,112,113,120,121,129,134,137,139,145,152,153,158,],[-54,56,-53,-50,-51,-52,-57,-55,-56,56,-3,56,56,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-58,-59,56,-54,-60,-61,-57,56,56,56,56,56,-60,56,]),'SHL':([31,32,33,37,38,39,45,65,66,67,69,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,112,113,120,121,129,134,137,139,145,152,153,158,],[-54,57,-53,-50,-51,-52,-57,-55,-56,57,-3,57,57,-62,-63,-64,-65,-66,57,57,57,57,57,-72,-73,57,57,57,57,57,57,-58,-59,57,-54,-60,-61,-57,57,57,57,57,57,-60,57,]),'SHR':([31,32,33,37,38,39,45,65,66,67,69,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,112,113,120,121,129,134,137,139,145,152,153,158,],[-54,58,-53,-50,-51,-52,-57,-55,-56,58,-3,58,58,-62,-63,-64,-65,-66,58,58,58,58,58,-72,-73,58,58,58,58,58,58,-58,-59,58,-54,-60,-61,-57,58,58,58,58,58,-60,58,]),'EQ':([31,32,33,37,38,39,45,65,66,67,69,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,112,113,120,121,129,134,137,139,145,152,153,158,],[-54,59,-53,-50,-51,-52,-57,-55,-56,59,-3,59,59,-62,-63,-64,-65,-66,59,59,59,59,59,-72,-73,None,None,None,None,None,None,-58,-59,59,-54,-60,-61,-57,59,59,59,59,59,-60,59,]),'NEQ':([31,32,33,37,38,39,45,65,66,67,69,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,112,113,120,121,129,134,137,139,145,152,153,158,],[-54,60,-53,-50,-51,-52,-57,-55,-56,60,-3,60,60,-62,-63,-64,-65,-66,60,60,60,60,60,-72,-73,None,None,None,None,None,None,-58,-59,60,-54,-60,-61,-57,60,60,60,60,60,-60,60,]),'>':([31,32,33,37,38,39,45,65,66,67,69,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,112,113,120,121,129,134,137,139,145,152,153,158,],[-54,61,-53,-50,-51,-52,-57,-55,-56,61,-3,61,61,-62,-63,-64,-65,-66,61,61,61,61,61,-72,-73,None,None,None,None,None,None,-58,-59,61,-54,-60,-61,-57,61,61,61,61,61,-60,61,]),'<':([31,32,33,37,38,39,45,65,66,67,69,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,112,113,120,121,129,134,137,139,145,152,153,158,],[-54,62,-53,-50,-51,-52,-57,-55,-56,62,-3,62,62,-62,-63,-64,-65,-66,62,62,62,62,62,-72,-73,None,None,None,None,None,None,-58,-59,62,-54,-60,-61,-57,62,62,62,62,62,-60,62,]),'LE':([31,32,33,37,38,39,45,65,66,67,69,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,112,113,120,121,129,134,137,139,145,152,153,158,],[-54,63,-53,-50,-51,-52,-57,-55,-56,63,-3,63,63,-62,-63,-64,-65,-66,63,63,63,63,63,-72,-73,None,None,None,None,None,None,-58,-59,63,-54,-60,-61,-57,63,63,63,63,63,-60,63,]),'GE':([31,32,33,37,38,39,45,65,66,67,69,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,112,113,120,121,129,134,137,139,145,152,153,158,],[-54,64,-53,-50,-51,-52,-57,-55,-56,64,-3,64,64,-62,-63,-64,-65,-66,64,64,64,64,64,-72,-73,None,None,None,None,None,None,-58,-59,64,-54,-60,-61,-57,64,64,64,64,64,-60,64,]),']':([40,],[69,]),':':([113,],[127,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'ext_declarations':([0,],[2,]),'declarations':([0,],[3,]),'declaration':([0,3,72,98,127,133,154,155,156,157,159,167,168,173,],[4,9,103,103,103,103,103,103,103,103,103,103,103,103,]),'fundefs':([0,3,72,98,127,133,154,155,156,157,159,167,168,173,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'fundef':([0,3,5,72,98,127,133,154,155,156,157,159,167,168,173,],[8,8,10,8,8,8,8,8,8,8,8,8,8,8,8,]),'inits':([6,],[12,]),'init':([6,19,],[14,25,]),'array':([13,26,31,113,170,],[22,22,45,129,174,]),'args_list_or_empty':([20,],[28,]),'args_list':([20,],[29,]),'arg':([20,44,],[30,73,]),'expression':([21,36,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,72,98,117,122,127,128,130,131,132,133,141,148,154,155,156,157,159,167,168,173,],[32,67,70,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,112,112,134,137,112,139,77,145,145,112,152,158,112,112,112,112,112,112,112,112,]),'const':([21,36,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,72,98,117,122,127,128,130,131,132,133,141,148,154,155,156,157,159,167,168,173,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'compound_instr':([43,72,98,127,133,154,155,156,157,159,167,168,173,],[71,110,110,110,110,110,110,110,110,110,110,110,110,]),'expr_list_or_empty':([46,130,],[74,142,]),'expr_list':([46,130,],[76,76,]),'instructions':([72,],[98,]),'instruction':([72,98,127,133,154,155,156,157,159,167,168,173,],[100,124,138,148,161,162,163,164,166,171,172,175,]),'labeled_instr':([72,98,127,133,154,155,156,157,159,167,168,173,],[101,101,101,101,101,101,101,101,101,101,101,101,]),'assignment':([72,98,127,133,154,155,156,157,159,165,167,168,173,],[102,102,102,102,102,102,102,102,102,169,102,102,102,]),'choice_instr':([72,98,127,133,154,155,156,157,159,167,168,173,],[104,104,104,104,104,104,104,104,104,104,104,104,]),'while_instr':([72,98,127,133,154,155,156,157,159,167,168,173,],[105,105,105,105,105,105,105,105,105,105,105,105,]),'for_instr':([72,98,127,133,154,155,156,157,159,167,168,173,],[106,106,106,106,106,106,106,106,106,106,106,106,]),'return_instr':([72,98,127,133,154,155,156,157,159,167,168,173,],[107,107,107,107,107,107,107,107,107,107,107,107,]),'break_instr':([72,98,127,133,154,155,156,157,159,167,168,173,],[108,108,108,108,108,108,108,108,108,108,108,108,]),'continue_instr':([72,98,127,133,154,155,156,157,159,167,168,173,],[109,109,109,109,109,109,109,109,109,109,109,109,]),'statement':([72,98,127,133,154,155,156,157,159,167,168,173,],[111,111,111,111,111,111,111,111,111,111,111,111,]),'condition':([131,132,],[143,146,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> ext_declarations','program',1,'p_program','cparser.py',67),
  ('ext_declarations -> declarations','ext_declarations',1,'p_ext_declarations','cparser.py',72),
  ('array -> [ INTEGER ]','array',3,'p_array','cparser.py',75),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','cparser.py',79),
  ('declarations -> declaration','declarations',1,'p_declarations_single','cparser.py',86),
  ('declarations -> <empty>','declarations',0,'p_declaration_blank','cparser.py',93),
  ('declaration -> fundefs','declaration',1,'p_declaration_fundef','cparser.py',97),
  ('declaration -> TYPE inits ;','declaration',3,'p_declaration','cparser.py',101),
  ('declaration -> error ;','declaration',2,'p_declaration_error','cparser.py',105),
  ('inits -> inits , init','inits',3,'p_inits','cparser.py',109),
  ('inits -> init','inits',1,'p_inits_single','cparser.py',113),
  ('init -> ID = expression','init',3,'p_init','cparser.py',117),
  ('init -> ID','init',1,'p_init2','cparser.py',121),
  ('init -> ID array','init',2,'p_init3','cparser.py',126),
  ('init -> * ID','init',2,'p_init4','cparser.py',131),
  ('init -> * ID = expression','init',4,'p_init5','cparser.py',136),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','cparser.py',140),
  ('instructions -> instruction','instructions',1,'p_instructions_single','cparser.py',147),
  ('instruction -> labeled_instr','instruction',1,'p_instruction','cparser.py',154),
  ('instruction -> assignment ;','instruction',2,'p_instruction','cparser.py',155),
  ('instruction -> declaration','instruction',1,'p_instruction','cparser.py',156),
  ('instruction -> choice_instr','instruction',1,'p_instruction','cparser.py',157),
  ('instruction -> while_instr','instruction',1,'p_instruction','cparser.py',158),
  ('instruction -> for_instr','instruction',1,'p_instruction','cparser.py',159),
  ('instruction -> return_instr','instruction',1,'p_instruction','cparser.py',160),
  ('instruction -> break_instr','instruction',1,'p_instruction','cparser.py',161),
  ('instruction -> continue_instr','instruction',1,'p_instruction','cparser.py',162),
  ('instruction -> compound_instr','instruction',1,'p_instruction','cparser.py',163),
  ('instruction -> statement','instruction',1,'p_instruction','cparser.py',164),
  ('instruction -> expression ;','instruction',2,'p_instruction','cparser.py',165),
  ('statement -> ID ( expr_list_or_empty ) ;','statement',5,'p_fun_call','cparser.py',169),
  ('labeled_instr -> ID : instruction','labeled_instr',3,'p_labeled_instr','cparser.py',173),
  ('assignment -> ID = expression','assignment',3,'p_assignment','cparser.py',177),
  ('assignment -> ID array = expression','assignment',4,'p_assignment_arr','cparser.py',183),
  ('assignment -> ID = error ;','assignment',4,'p_assignment_error','cparser.py',190),
  ('choice_instr -> IF ( condition ) instruction','choice_instr',5,'p_choice_instr','cparser.py',194),
  ('choice_instr -> IF ( condition ) instruction ELSE instruction','choice_instr',7,'p_choice_instr_else','cparser.py',198),
  ('choice_instr -> IF ( error ) instruction','choice_instr',5,'p_choice_instr_error','cparser.py',202),
  ('choice_instr -> IF ( error ) instruction ELSE instruction','choice_instr',7,'p_choice_instr_else_error','cparser.py',206),
  ('while_instr -> WHILE ( condition ) instruction','while_instr',5,'p_while_instr','cparser.py',210),
  ('for_instr -> FOR ( instruction expression ; assignment ) instruction','for_instr',8,'p_for_instr','cparser.py',214),
  ('for_instr -> FOR ( error ) instruction','for_instr',5,'p_for_error','cparser.py',218),
  ('while_instr -> WHILE ( error ) instruction','while_instr',5,'p_while_error','cparser.py',222),
  ('return_instr -> RETURN expression ;','return_instr',3,'p_return_instr','cparser.py',226),
  ('continue_instr -> CONTINUE ;','continue_instr',2,'p_continue_instr','cparser.py',230),
  ('break_instr -> BREAK ;','break_instr',2,'p_break_instr','cparser.py',234),
  ('compound_instr -> { instructions }','compound_instr',3,'p_compound_instr','cparser.py',238),
  ('compound_instr -> { }','compound_instr',2,'p_compound_instr2','cparser.py',242),
  ('condition -> expression','condition',1,'p_condition','cparser.py',246),
  ('const -> INTEGER','const',1,'p_const_integer','cparser.py',250),
  ('const -> FLOAT','const',1,'p_const_float','cparser.py',254),
  ('const -> STRING','const',1,'p_const_string','cparser.py',258),
  ('expression -> const','expression',1,'p_expression_const','cparser.py',262),
  ('expression -> ID','expression',1,'p_expression_id','cparser.py',266),
  ('expression -> & ID','expression',2,'p_expression_id_addr','cparser.py',270),
  ('expression -> * ID','expression',2,'p_expression_id_deref','cparser.py',274),
  ('expression -> ID array','expression',2,'p_expression_arr','cparser.py',278),
  ('expression -> ( expression )','expression',3,'p_expression_brackets','cparser.py',282),
  ('expression -> ( error )','expression',3,'p_expression_brackets_error','cparser.py',286),
  ('expression -> ID ( expr_list_or_empty )','expression',4,'p_expression_fun_call','cparser.py',290),
  ('expression -> ID ( error )','expression',4,'p_expression_fun_call_error','cparser.py',294),
  ('expression -> expression + expression','expression',3,'p_expression_binary_op','cparser.py',298),
  ('expression -> expression - expression','expression',3,'p_expression_binary_op','cparser.py',299),
  ('expression -> expression * expression','expression',3,'p_expression_binary_op','cparser.py',300),
  ('expression -> expression / expression','expression',3,'p_expression_binary_op','cparser.py',301),
  ('expression -> expression % expression','expression',3,'p_expression_binary_op','cparser.py',302),
  ('expression -> expression | expression','expression',3,'p_expression_binary_op','cparser.py',303),
  ('expression -> expression & expression','expression',3,'p_expression_binary_op','cparser.py',304),
  ('expression -> expression ^ expression','expression',3,'p_expression_binary_op','cparser.py',305),
  ('expression -> expression AND expression','expression',3,'p_expression_binary_op','cparser.py',306),
  ('expression -> expression OR expression','expression',3,'p_expression_binary_op','cparser.py',307),
  ('expression -> expression SHL expression','expression',3,'p_expression_binary_op','cparser.py',308),
  ('expression -> expression SHR expression','expression',3,'p_expression_binary_op','cparser.py',309),
  ('expression -> expression EQ expression','expression',3,'p_expression_binary_op','cparser.py',310),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binary_op','cparser.py',311),
  ('expression -> expression > expression','expression',3,'p_expression_binary_op','cparser.py',312),
  ('expression -> expression < expression','expression',3,'p_expression_binary_op','cparser.py',313),
  ('expression -> expression LE expression','expression',3,'p_expression_binary_op','cparser.py',314),
  ('expression -> expression GE expression','expression',3,'p_expression_binary_op','cparser.py',315),
  ('expr_list_or_empty -> expr_list','expr_list_or_empty',1,'p_expr_list_non_empty','cparser.py',320),
  ('expr_list_or_empty -> <empty>','expr_list_or_empty',0,'p_expr_list_empty','cparser.py',324),
  ('expr_list -> expr_list , expression','expr_list',3,'p_expr_list','cparser.py',328),
  ('expr_list -> expression','expr_list',1,'p_expr_list_single','cparser.py',332),
  ('fundefs -> fundefs fundef','fundefs',2,'p_fundefs','cparser.py',344),
  ('fundefs -> fundef','fundefs',1,'p_fundefs_single','cparser.py',348),
  ('fundefs -> <empty>','fundefs',0,'p_fundefs_empty','cparser.py',352),
  ('fundef -> TYPE ID ( args_list_or_empty ) compound_instr','fundef',6,'p_fundef','cparser.py',356),
  ('args_list_or_empty -> args_list','args_list_or_empty',1,'p_args_list_or_empty','cparser.py',360),
  ('args_list_or_empty -> <empty>','args_list_or_empty',0,'p_args_list_or_empty','cparser.py',361),
  ('args_list -> args_list , arg','args_list',3,'p_args_list','cparser.py',376),
  ('args_list -> arg','args_list',1,'p_args_list_single','cparser.py',380),
  ('arg -> TYPE ID','arg',2,'p_arg','cparser.py',384),
]
