
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocIFXnonassocELSEright=leftORleftANDleft|left^left&nonassoc<>EQNEQLEGEleftSHLSHRleft+-left*/%AND EQ FLOAT GE ID INTEGER LE NEQ OR SHL SHR STRING TYPE BREAK CONTINUE IF ELSE RETURN WHILE FORprogram : ext_declarations fundefs instructionsext_declarations : declarationsarray : '[' INTEGER ']'declarations : declarations declarationdeclarations : declarationdeclarations :declaration : fundefsdeclaration : TYPE inits ';'declaration : error ';'inits : inits ',' initinits : initinit : ID '=' expressioninit : IDinit : ID arrayinit : '*' IDinit : '*' ID '=' expressioninstructions : instructions instructioninstructions : instructioninstruction : labeled_instr\n        | assignment ';'\n        | declaration\n        | choice_instr\n        | while_instr\n        | for_instr\n        | return_instr\n        | break_instr\n        | continue_instr\n        | compound_instr\n        | statement\n        | expression ';'statement : ID '(' expr_list_or_empty ')' ';'labeled_instr : ID ':' instructionassignment : ID '=' expressionassignment : ID array '=' expressionassignment : ID '=' error ';'choice_instr : IF '(' condition ')' instruction  %prec IFXchoice_instr : IF '(' condition ')' instruction ELSE instructionchoice_instr : IF '(' error ')' instruction  %prec IFXchoice_instr : IF '(' error ')' instruction ELSE instructionwhile_instr : WHILE '(' condition ')' instructionfor_instr : FOR '(' instruction expression ';' assignment ')' instructionfor_instr : FOR '(' error ')' instructionwhile_instr : WHILE '(' error ')' instructionreturn_instr : RETURN expression ';'continue_instr : CONTINUE ';'break_instr : BREAK ';'compound_instr : '{' declarations instructions '}'compound_instr : '{' '}'condition : expressionconst : INTEGERconst : FLOATconst : STRINGexpression : constexpression : IDexpression : '&' IDexpression : '*' IDexpression : ID arrayexpression : '(' expression ')'expression : '(' error ')'expression : ID '(' expr_list_or_empty ')'expression : ID '(' error ')'expression : expression '+' expression\n        | expression '-' expression\n        | expression '*' expression\n        | expression '/' expression\n        | expression '%' expression\n        | expression '|' expression\n        | expression '&' expression\n        | expression '^' expression\n        | expression AND expression\n        | expression OR expression\n        | expression SHL expression\n        | expression SHR expression\n        | expression EQ expression\n        | expression NEQ expression\n        | expression '>' expression\n        | expression '<' expression\n        | expression LE expression\n        | expression GE expressionexpr_list_or_empty : expr_listexpr_list_or_empty :expr_list : expr_list ',' expressionexpr_list : expressionfundefs : fundefs fundeffundefs : fundeffundefs :fundef : TYPE ID '(' args_list_or_empty ')' compound_instrargs_list_or_empty : args_list\n        |args_list : args_list ',' argargs_list : argarg : TYPE ID"
    
_lr_action_items = {'TYPE':([0,2,3,4,5,8,9,11,12,17,18,19,20,24,25,27,28,29,30,31,32,33,34,42,50,52,57,58,65,66,87,89,90,91,92,104,141,142,143,146,155,156,157,158,160,161,162,164,167,168,169,170,172,173,174,177,178,179,181,],[6,10,10,6,-5,-85,21,-84,-4,-9,6,-84,-18,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,6,-8,97,-17,6,-20,-30,6,-46,-45,6,-48,-32,-44,6,-4,97,6,6,6,6,6,-47,-87,-31,-36,-38,-40,-43,-42,6,6,-37,-39,6,-41,]),'error':([0,2,3,4,5,8,9,11,12,17,18,19,20,23,24,25,27,28,29,30,31,32,33,34,42,50,57,58,59,61,65,66,85,86,87,89,90,91,92,104,115,141,142,143,155,156,157,158,160,161,162,164,167,168,169,170,172,173,174,177,178,179,181,],[7,-86,-7,7,-5,-85,7,-84,-4,-9,7,-84,-18,63,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,7,-8,-17,7,106,109,-20,-30,135,138,140,-46,-45,7,-48,-32,109,-44,7,-4,7,7,7,7,7,-47,-87,-31,-36,-38,-40,-43,-42,7,7,-37,-39,7,-41,]),'ID':([0,2,3,4,5,6,8,9,10,11,12,16,17,18,19,20,21,23,24,25,27,28,29,30,31,32,33,34,39,42,44,45,50,51,53,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92,97,103,104,107,115,139,141,142,143,153,155,156,157,158,160,161,162,164,167,168,169,170,171,172,173,174,177,178,179,181,],[-6,-86,-7,-2,-5,14,-85,22,49,-84,-4,56,-9,22,-84,-18,14,64,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,64,-6,93,94,-8,96,64,-17,22,64,64,-20,-30,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,22,-46,-45,22,-48,144,64,-32,64,64,64,-44,22,-4,64,22,22,22,22,22,-47,-87,-31,-36,-38,-40,-43,176,-42,22,22,-37,-39,22,-41,]),'IF':([0,2,3,4,5,8,9,11,12,17,18,19,20,24,25,27,28,29,30,31,32,33,34,42,50,57,58,65,66,87,89,90,91,92,104,141,142,143,155,156,157,158,160,161,162,164,167,168,169,170,172,173,174,177,178,179,181,],[-6,-86,-7,-2,-5,-85,36,-84,-4,-9,36,-84,-18,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,-6,-8,-17,36,-20,-30,36,-46,-45,36,-48,-32,-44,36,-4,36,36,36,36,36,-47,-87,-31,-36,-38,-40,-43,-42,36,36,-37,-39,36,-41,]),'WHILE':([0,2,3,4,5,8,9,11,12,17,18,19,20,24,25,27,28,29,30,31,32,33,34,42,50,57,58,65,66,87,89,90,91,92,104,141,142,143,155,156,157,158,160,161,162,164,167,168,169,170,172,173,174,177,178,179,181,],[-6,-86,-7,-2,-5,-85,37,-84,-4,-9,37,-84,-18,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,-6,-8,-17,37,-20,-30,37,-46,-45,37,-48,-32,-44,37,-4,37,37,37,37,37,-47,-87,-31,-36,-38,-40,-43,-42,37,37,-37,-39,37,-41,]),'FOR':([0,2,3,4,5,8,9,11,12,17,18,19,20,24,25,27,28,29,30,31,32,33,34,42,50,57,58,65,66,87,89,90,91,92,104,141,142,143,155,156,157,158,160,161,162,164,167,168,169,170,172,173,174,177,178,179,181,],[-6,-86,-7,-2,-5,-85,38,-84,-4,-9,38,-84,-18,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,-6,-8,-17,38,-20,-30,38,-46,-45,38,-48,-32,-44,38,-4,38,38,38,38,38,-47,-87,-31,-36,-38,-40,-43,-42,38,38,-37,-39,38,-41,]),'RETURN':([0,2,3,4,5,8,9,11,12,17,18,19,20,24,25,27,28,29,30,31,32,33,34,42,50,57,58,65,66,87,89,90,91,92,104,141,142,143,155,156,157,158,160,161,162,164,167,168,169,170,172,173,174,177,178,179,181,],[-6,-86,-7,-2,-5,-85,39,-84,-4,-9,39,-84,-18,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,-6,-8,-17,39,-20,-30,39,-46,-45,39,-48,-32,-44,39,-4,39,39,39,39,39,-47,-87,-31,-36,-38,-40,-43,-42,39,39,-37,-39,39,-41,]),'BREAK':([0,2,3,4,5,8,9,11,12,17,18,19,20,24,25,27,28,29,30,31,32,33,34,42,50,57,58,65,66,87,89,90,91,92,104,141,142,143,155,156,157,158,160,161,162,164,167,168,169,170,172,173,174,177,178,179,181,],[-6,-86,-7,-2,-5,-85,40,-84,-4,-9,40,-84,-18,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,-6,-8,-17,40,-20,-30,40,-46,-45,40,-48,-32,-44,40,-4,40,40,40,40,40,-47,-87,-31,-36,-38,-40,-43,-42,40,40,-37,-39,40,-41,]),'CONTINUE':([0,2,3,4,5,8,9,11,12,17,18,19,20,24,25,27,28,29,30,31,32,33,34,42,50,57,58,65,66,87,89,90,91,92,104,141,142,143,155,156,157,158,160,161,162,164,167,168,169,170,172,173,174,177,178,179,181,],[-6,-86,-7,-2,-5,-85,41,-84,-4,-9,41,-84,-18,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,-6,-8,-17,41,-20,-30,41,-46,-45,41,-48,-32,-44,41,-4,41,41,41,41,41,-47,-87,-31,-36,-38,-40,-43,-42,41,41,-37,-39,41,-41,]),'{':([0,2,3,4,5,8,9,11,12,17,18,19,20,24,25,27,28,29,30,31,32,33,34,42,50,57,58,65,66,87,89,90,91,92,104,141,142,143,145,155,156,157,158,160,161,162,164,167,168,169,170,172,173,174,177,178,179,181,],[-6,-86,-7,-2,-5,-85,42,-84,-4,-9,42,-84,-18,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,-6,-8,-17,42,-20,-30,42,-46,-45,42,-48,-32,-44,42,-4,42,42,42,42,42,42,-47,-87,-31,-36,-38,-40,-43,-42,42,42,-37,-39,42,-41,]),'&':([0,2,3,4,5,8,9,11,12,17,18,19,20,22,23,24,25,27,28,29,30,31,32,33,34,35,39,42,43,46,47,48,50,53,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,101,103,104,105,107,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,139,141,142,143,147,148,150,151,152,153,155,156,157,158,159,160,161,162,164,165,166,167,168,169,170,172,173,174,177,178,179,181,],[-6,-86,-7,-2,-5,-85,44,-84,-4,-9,44,-84,-18,-54,44,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,73,44,-6,-53,-50,-51,-52,-8,44,-17,44,44,-57,44,73,-54,-20,-30,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,73,-46,-45,44,-48,-55,-56,73,44,-32,73,44,73,-58,-59,-57,44,-62,-63,-64,-65,-66,73,-68,73,73,73,-72,-73,-74,-75,-76,-77,-78,-79,73,44,-44,44,-4,-3,73,73,-60,-61,44,44,44,44,44,73,44,-47,-87,-31,73,-60,-36,-38,-40,-43,-42,44,44,-37,-39,44,-41,]),'*':([0,2,3,4,5,6,8,9,11,12,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,35,39,42,43,46,47,48,50,51,53,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,101,103,104,105,107,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,139,141,142,143,147,148,150,151,152,153,155,156,157,158,159,160,161,162,164,165,166,167,168,169,170,172,173,174,177,178,179,181,],[-6,-86,-7,-2,-5,16,-85,45,-84,-4,-9,45,-84,-18,16,-54,45,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,69,45,-6,-53,-50,-51,-52,-8,16,45,-17,45,45,-57,45,69,-54,-20,-30,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,69,-46,-45,45,-48,-55,-56,69,45,-32,69,45,69,-58,-59,-57,45,69,69,-64,-65,-66,69,69,69,69,69,69,69,69,69,69,69,69,69,69,45,-44,45,-4,-3,69,69,-60,-61,45,45,45,45,45,69,45,-47,-87,-31,69,-60,-36,-38,-40,-43,-42,45,45,-37,-39,45,-41,]),'(':([0,2,3,4,5,8,9,11,12,14,17,18,19,20,22,23,24,25,27,28,29,30,31,32,33,34,36,37,38,39,42,49,50,53,57,58,59,61,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92,103,104,107,115,139,141,142,143,153,155,156,157,158,160,161,162,164,167,168,169,170,172,173,174,177,178,179,181,],[-6,-86,-7,-2,-5,-85,23,-84,-4,52,-9,23,-84,-18,61,23,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,85,86,87,23,-6,52,-8,23,-17,23,23,23,115,-20,-30,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-46,-45,23,-48,23,-32,23,23,23,-44,23,-4,23,23,23,23,23,23,-47,-87,-31,-36,-38,-40,-43,-42,23,23,-37,-39,23,-41,]),'INTEGER':([0,2,3,4,5,8,9,11,12,17,18,19,20,23,24,25,27,28,29,30,31,32,33,34,39,42,50,53,55,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92,103,104,107,115,139,141,142,143,153,155,156,157,158,160,161,162,164,167,168,169,170,172,173,174,177,178,179,181,],[-6,-86,-7,-2,-5,-85,46,-84,-4,-9,46,-84,-18,46,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,46,-6,-8,46,102,-17,46,46,46,-20,-30,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-46,-45,46,-48,46,-32,46,46,46,-44,46,-4,46,46,46,46,46,46,-47,-87,-31,-36,-38,-40,-43,-42,46,46,-37,-39,46,-41,]),'FLOAT':([0,2,3,4,5,8,9,11,12,17,18,19,20,23,24,25,27,28,29,30,31,32,33,34,39,42,50,53,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92,103,104,107,115,139,141,142,143,153,155,156,157,158,160,161,162,164,167,168,169,170,172,173,174,177,178,179,181,],[-6,-86,-7,-2,-5,-85,47,-84,-4,-9,47,-84,-18,47,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,47,-6,-8,47,-17,47,47,47,-20,-30,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-46,-45,47,-48,47,-32,47,47,47,-44,47,-4,47,47,47,47,47,47,-47,-87,-31,-36,-38,-40,-43,-42,47,47,-37,-39,47,-41,]),'STRING':([0,2,3,4,5,8,9,11,12,17,18,19,20,23,24,25,27,28,29,30,31,32,33,34,39,42,50,53,57,58,59,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,90,91,92,103,104,107,115,139,141,142,143,153,155,156,157,158,160,161,162,164,167,168,169,170,172,173,174,177,178,179,181,],[-6,-86,-7,-2,-5,-85,48,-84,-4,-9,48,-84,-18,48,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,48,-6,-8,48,-17,48,48,48,-20,-30,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-46,-45,48,-48,48,-32,48,48,48,-44,48,-4,48,48,48,48,48,48,-47,-87,-31,-36,-38,-40,-43,-42,48,48,-37,-39,48,-41,]),'$end':([0,1,2,3,4,5,8,9,11,12,17,18,19,20,24,25,27,28,29,30,31,32,33,34,50,57,58,65,66,89,90,92,104,141,155,156,157,158,160,161,162,164,167,168,169,170,172,173,174,177,178,179,181,],[-6,0,-86,-7,-2,-5,-85,-86,-84,-4,-9,-1,-84,-18,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,-8,-17,-86,-20,-30,-46,-45,-48,-32,-44,-86,-86,-86,-86,-86,-47,-87,-31,-36,-38,-40,-43,-42,-86,-86,-37,-39,-86,-41,]),'}':([3,5,8,11,17,20,24,25,27,28,29,30,31,32,33,34,42,50,57,58,65,66,89,90,91,92,104,141,142,143,155,156,157,158,160,161,162,164,167,168,169,170,172,173,174,177,178,179,181,],[-7,-5,-85,-84,-9,-18,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,92,-8,-17,-86,-20,-30,-46,-45,-86,-48,-32,-44,161,-4,-86,-86,-86,-86,-86,-47,-87,-31,-36,-38,-40,-43,-42,-86,-86,-37,-39,-86,-41,]),'ELSE':([3,8,11,17,24,25,27,28,29,30,31,32,33,34,50,58,65,66,89,90,92,104,141,155,156,157,158,160,161,162,164,167,168,169,170,172,173,174,177,178,179,181,],[-7,-85,-84,-9,-28,-19,-21,-22,-23,-24,-25,-26,-27,-29,-8,-86,-20,-30,-46,-45,-48,-32,-44,-86,-86,-86,-86,-86,-47,-87,-31,173,174,-40,-43,-42,-86,-86,-37,-39,-86,-41,]),';':([7,13,14,15,22,26,35,40,41,43,46,47,48,54,56,60,64,88,93,94,95,96,101,105,106,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,140,147,148,149,150,151,152,159,166,],[17,50,-13,-11,-54,65,66,89,90,-53,-50,-51,-52,-14,-15,-57,-54,141,-55,-56,-10,-13,-12,-33,149,-58,-59,-57,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,17,-3,-16,-35,-34,164,-61,171,-60,]),',':([13,14,15,43,46,47,48,54,56,64,93,94,95,96,99,100,101,110,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,144,147,148,152,163,165,166,],[51,-13,-11,-53,-50,-51,-52,-14,-15,-54,-55,-56,-10,-13,146,-91,-12,153,-83,-58,-59,-57,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-92,-3,-16,-61,-90,-82,-60,]),'=':([14,22,56,60,96,147,176,180,],[53,59,103,107,53,-3,59,107,]),'[':([14,22,64,96,176,],[55,55,55,55,55,]),':':([22,],[58,]),'+':([22,35,43,46,47,48,60,62,64,88,93,94,101,105,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,147,148,150,151,152,159,165,166,],[-54,67,-53,-50,-51,-52,-57,67,-54,67,-55,-56,67,67,67,-58,-59,-57,-62,-63,-64,-65,-66,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-3,67,67,-60,-61,67,67,-60,]),'-':([22,35,43,46,47,48,60,62,64,88,93,94,101,105,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,147,148,150,151,152,159,165,166,],[-54,68,-53,-50,-51,-52,-57,68,-54,68,-55,-56,68,68,68,-58,-59,-57,-62,-63,-64,-65,-66,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-3,68,68,-60,-61,68,68,-60,]),'/':([22,35,43,46,47,48,60,62,64,88,93,94,101,105,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,147,148,150,151,152,159,165,166,],[-54,70,-53,-50,-51,-52,-57,70,-54,70,-55,-56,70,70,70,-58,-59,-57,70,70,-64,-65,-66,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-3,70,70,-60,-61,70,70,-60,]),'%':([22,35,43,46,47,48,60,62,64,88,93,94,101,105,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,147,148,150,151,152,159,165,166,],[-54,71,-53,-50,-51,-52,-57,71,-54,71,-55,-56,71,71,71,-58,-59,-57,71,71,-64,-65,-66,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-3,71,71,-60,-61,71,71,-60,]),'|':([22,35,43,46,47,48,60,62,64,88,93,94,101,105,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,147,148,150,151,152,159,165,166,],[-54,72,-53,-50,-51,-52,-57,72,-54,72,-55,-56,72,72,72,-58,-59,-57,-62,-63,-64,-65,-66,-67,-68,-69,72,72,-72,-73,-74,-75,-76,-77,-78,-79,72,-3,72,72,-60,-61,72,72,-60,]),'^':([22,35,43,46,47,48,60,62,64,88,93,94,101,105,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,147,148,150,151,152,159,165,166,],[-54,74,-53,-50,-51,-52,-57,74,-54,74,-55,-56,74,74,74,-58,-59,-57,-62,-63,-64,-65,-66,74,-68,-69,74,74,-72,-73,-74,-75,-76,-77,-78,-79,74,-3,74,74,-60,-61,74,74,-60,]),'AND':([22,35,43,46,47,48,60,62,64,88,93,94,101,105,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,147,148,150,151,152,159,165,166,],[-54,75,-53,-50,-51,-52,-57,75,-54,75,-55,-56,75,75,75,-58,-59,-57,-62,-63,-64,-65,-66,-67,-68,-69,-70,75,-72,-73,-74,-75,-76,-77,-78,-79,75,-3,75,75,-60,-61,75,75,-60,]),'OR':([22,35,43,46,47,48,60,62,64,88,93,94,101,105,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,147,148,150,151,152,159,165,166,],[-54,76,-53,-50,-51,-52,-57,76,-54,76,-55,-56,76,76,76,-58,-59,-57,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,76,-3,76,76,-60,-61,76,76,-60,]),'SHL':([22,35,43,46,47,48,60,62,64,88,93,94,101,105,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,147,148,150,151,152,159,165,166,],[-54,77,-53,-50,-51,-52,-57,77,-54,77,-55,-56,77,77,77,-58,-59,-57,-62,-63,-64,-65,-66,77,77,77,77,77,-72,-73,77,77,77,77,77,77,77,-3,77,77,-60,-61,77,77,-60,]),'SHR':([22,35,43,46,47,48,60,62,64,88,93,94,101,105,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,147,148,150,151,152,159,165,166,],[-54,78,-53,-50,-51,-52,-57,78,-54,78,-55,-56,78,78,78,-58,-59,-57,-62,-63,-64,-65,-66,78,78,78,78,78,-72,-73,78,78,78,78,78,78,78,-3,78,78,-60,-61,78,78,-60,]),'EQ':([22,35,43,46,47,48,60,62,64,88,93,94,101,105,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,147,148,150,151,152,159,165,166,],[-54,79,-53,-50,-51,-52,-57,79,-54,79,-55,-56,79,79,79,-58,-59,-57,-62,-63,-64,-65,-66,79,79,79,79,79,-72,-73,None,None,None,None,None,None,79,-3,79,79,-60,-61,79,79,-60,]),'NEQ':([22,35,43,46,47,48,60,62,64,88,93,94,101,105,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,147,148,150,151,152,159,165,166,],[-54,80,-53,-50,-51,-52,-57,80,-54,80,-55,-56,80,80,80,-58,-59,-57,-62,-63,-64,-65,-66,80,80,80,80,80,-72,-73,None,None,None,None,None,None,80,-3,80,80,-60,-61,80,80,-60,]),'>':([22,35,43,46,47,48,60,62,64,88,93,94,101,105,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,147,148,150,151,152,159,165,166,],[-54,81,-53,-50,-51,-52,-57,81,-54,81,-55,-56,81,81,81,-58,-59,-57,-62,-63,-64,-65,-66,81,81,81,81,81,-72,-73,None,None,None,None,None,None,81,-3,81,81,-60,-61,81,81,-60,]),'<':([22,35,43,46,47,48,60,62,64,88,93,94,101,105,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,147,148,150,151,152,159,165,166,],[-54,82,-53,-50,-51,-52,-57,82,-54,82,-55,-56,82,82,82,-58,-59,-57,-62,-63,-64,-65,-66,82,82,82,82,82,-72,-73,None,None,None,None,None,None,82,-3,82,82,-60,-61,82,82,-60,]),'LE':([22,35,43,46,47,48,60,62,64,88,93,94,101,105,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,147,148,150,151,152,159,165,166,],[-54,83,-53,-50,-51,-52,-57,83,-54,83,-55,-56,83,83,83,-58,-59,-57,-62,-63,-64,-65,-66,83,83,83,83,83,-72,-73,None,None,None,None,None,None,83,-3,83,83,-60,-61,83,83,-60,]),'GE':([22,35,43,46,47,48,60,62,64,88,93,94,101,105,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,147,148,150,151,152,159,165,166,],[-54,84,-53,-50,-51,-52,-57,84,-54,84,-55,-56,84,84,84,-58,-59,-57,-62,-63,-64,-65,-66,84,84,84,84,84,-72,-73,None,None,None,None,None,None,84,-3,84,84,-60,-61,84,84,-60,]),')':([43,46,47,48,52,61,62,63,64,93,94,98,99,100,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,140,144,147,149,150,152,154,163,165,166,175,],[-53,-50,-51,-52,-89,-81,112,113,-54,-55,-56,145,-88,-91,-33,151,152,-80,-83,-58,-59,-57,-81,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,155,156,-49,157,158,160,-92,-3,-35,-34,-61,166,-90,-82,-60,179,]),']':([102,],[147,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'ext_declarations':([0,],[2,]),'fundefs':([0,2,4,9,18,42,58,87,91,142,155,156,157,158,160,173,174,179,],[3,9,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'declarations':([0,42,],[4,91,]),'declaration':([0,4,9,18,42,58,87,91,142,155,156,157,158,160,173,174,179,],[5,12,27,27,5,27,27,143,27,27,27,27,27,27,27,27,27,]),'fundef':([0,2,3,4,9,18,42,58,87,91,142,155,156,157,158,160,173,174,179,],[8,8,11,8,19,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'inits':([6,21,],[13,13,]),'init':([6,21,51,],[15,15,95,]),'instructions':([9,91,],[18,142,]),'instruction':([9,18,58,87,91,142,155,156,157,158,160,173,174,179,],[20,57,104,139,20,57,167,168,169,170,172,177,178,181,]),'compound_instr':([9,18,58,87,91,142,145,155,156,157,158,160,173,174,179,],[24,24,24,24,24,24,162,24,24,24,24,24,24,24,24,]),'labeled_instr':([9,18,58,87,91,142,155,156,157,158,160,173,174,179,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'assignment':([9,18,58,87,91,142,155,156,157,158,160,171,173,174,179,],[26,26,26,26,26,26,26,26,26,26,26,175,26,26,26,]),'choice_instr':([9,18,58,87,91,142,155,156,157,158,160,173,174,179,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'while_instr':([9,18,58,87,91,142,155,156,157,158,160,173,174,179,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'for_instr':([9,18,58,87,91,142,155,156,157,158,160,173,174,179,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'return_instr':([9,18,58,87,91,142,155,156,157,158,160,173,174,179,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'break_instr':([9,18,58,87,91,142,155,156,157,158,160,173,174,179,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'continue_instr':([9,18,58,87,91,142,155,156,157,158,160,173,174,179,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'statement':([9,18,58,87,91,142,155,156,157,158,160,173,174,179,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'expression':([9,18,23,39,53,58,59,61,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,103,107,115,139,142,153,155,156,157,158,160,173,174,179,],[35,35,62,88,101,35,105,111,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,136,136,35,35,148,150,111,159,35,165,35,35,35,35,35,35,35,35,]),'const':([9,18,23,39,53,58,59,61,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,103,107,115,139,142,153,155,156,157,158,160,173,174,179,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'array':([14,22,64,96,176,],[54,60,114,54,180,]),'args_list_or_empty':([52,],[98,]),'args_list':([52,],[99,]),'arg':([52,146,],[100,163,]),'expr_list_or_empty':([61,115,],[108,154,]),'expr_list':([61,115,],[110,110,]),'condition':([85,86,],[134,137,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> ext_declarations fundefs instructions','program',3,'p_program','cparser.py',67),
  ('ext_declarations -> declarations','ext_declarations',1,'p_ext_declarations','cparser.py',72),
  ('array -> [ INTEGER ]','array',3,'p_array','cparser.py',75),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','cparser.py',79),
  ('declarations -> declaration','declarations',1,'p_declarations_single','cparser.py',86),
  ('declarations -> <empty>','declarations',0,'p_declaration_blank','cparser.py',93),
  ('declaration -> fundefs','declaration',1,'p_declaration_fundef','cparser.py',97),
  ('declaration -> TYPE inits ;','declaration',3,'p_declaration','cparser.py',101),
  ('declaration -> error ;','declaration',2,'p_declaration_error','cparser.py',105),
  ('inits -> inits , init','inits',3,'p_inits','cparser.py',109),
  ('inits -> init','inits',1,'p_inits_single','cparser.py',113),
  ('init -> ID = expression','init',3,'p_init','cparser.py',117),
  ('init -> ID','init',1,'p_init2','cparser.py',121),
  ('init -> ID array','init',2,'p_init3','cparser.py',126),
  ('init -> * ID','init',2,'p_init4','cparser.py',131),
  ('init -> * ID = expression','init',4,'p_init5','cparser.py',136),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','cparser.py',140),
  ('instructions -> instruction','instructions',1,'p_instructions_single','cparser.py',147),
  ('instruction -> labeled_instr','instruction',1,'p_instruction','cparser.py',154),
  ('instruction -> assignment ;','instruction',2,'p_instruction','cparser.py',155),
  ('instruction -> declaration','instruction',1,'p_instruction','cparser.py',156),
  ('instruction -> choice_instr','instruction',1,'p_instruction','cparser.py',157),
  ('instruction -> while_instr','instruction',1,'p_instruction','cparser.py',158),
  ('instruction -> for_instr','instruction',1,'p_instruction','cparser.py',159),
  ('instruction -> return_instr','instruction',1,'p_instruction','cparser.py',160),
  ('instruction -> break_instr','instruction',1,'p_instruction','cparser.py',161),
  ('instruction -> continue_instr','instruction',1,'p_instruction','cparser.py',162),
  ('instruction -> compound_instr','instruction',1,'p_instruction','cparser.py',163),
  ('instruction -> statement','instruction',1,'p_instruction','cparser.py',164),
  ('instruction -> expression ;','instruction',2,'p_instruction','cparser.py',165),
  ('statement -> ID ( expr_list_or_empty ) ;','statement',5,'p_fun_call','cparser.py',169),
  ('labeled_instr -> ID : instruction','labeled_instr',3,'p_labeled_instr','cparser.py',173),
  ('assignment -> ID = expression','assignment',3,'p_assignment','cparser.py',177),
  ('assignment -> ID array = expression','assignment',4,'p_assignment_arr','cparser.py',183),
  ('assignment -> ID = error ;','assignment',4,'p_assignment_error','cparser.py',190),
  ('choice_instr -> IF ( condition ) instruction','choice_instr',5,'p_choice_instr','cparser.py',194),
  ('choice_instr -> IF ( condition ) instruction ELSE instruction','choice_instr',7,'p_choice_instr_else','cparser.py',198),
  ('choice_instr -> IF ( error ) instruction','choice_instr',5,'p_choice_instr_error','cparser.py',202),
  ('choice_instr -> IF ( error ) instruction ELSE instruction','choice_instr',7,'p_choice_instr_else_error','cparser.py',206),
  ('while_instr -> WHILE ( condition ) instruction','while_instr',5,'p_while_instr','cparser.py',210),
  ('for_instr -> FOR ( instruction expression ; assignment ) instruction','for_instr',8,'p_for_instr','cparser.py',214),
  ('for_instr -> FOR ( error ) instruction','for_instr',5,'p_for_error','cparser.py',218),
  ('while_instr -> WHILE ( error ) instruction','while_instr',5,'p_while_error','cparser.py',222),
  ('return_instr -> RETURN expression ;','return_instr',3,'p_return_instr','cparser.py',226),
  ('continue_instr -> CONTINUE ;','continue_instr',2,'p_continue_instr','cparser.py',230),
  ('break_instr -> BREAK ;','break_instr',2,'p_break_instr','cparser.py',234),
  ('compound_instr -> { declarations instructions }','compound_instr',4,'p_compound_instr','cparser.py',238),
  ('compound_instr -> { }','compound_instr',2,'p_compound_instr2','cparser.py',242),
  ('condition -> expression','condition',1,'p_condition','cparser.py',246),
  ('const -> INTEGER','const',1,'p_const_integer','cparser.py',250),
  ('const -> FLOAT','const',1,'p_const_float','cparser.py',254),
  ('const -> STRING','const',1,'p_const_string','cparser.py',258),
  ('expression -> const','expression',1,'p_expression_const','cparser.py',262),
  ('expression -> ID','expression',1,'p_expression_id','cparser.py',266),
  ('expression -> & ID','expression',2,'p_expression_id_addr','cparser.py',270),
  ('expression -> * ID','expression',2,'p_expression_id_deref','cparser.py',274),
  ('expression -> ID array','expression',2,'p_expression_arr','cparser.py',278),
  ('expression -> ( expression )','expression',3,'p_expression_brackets','cparser.py',282),
  ('expression -> ( error )','expression',3,'p_expression_brackets_error','cparser.py',286),
  ('expression -> ID ( expr_list_or_empty )','expression',4,'p_expression_fun_call','cparser.py',290),
  ('expression -> ID ( error )','expression',4,'p_expression_fun_call_error','cparser.py',294),
  ('expression -> expression + expression','expression',3,'p_expression_binary_op','cparser.py',298),
  ('expression -> expression - expression','expression',3,'p_expression_binary_op','cparser.py',299),
  ('expression -> expression * expression','expression',3,'p_expression_binary_op','cparser.py',300),
  ('expression -> expression / expression','expression',3,'p_expression_binary_op','cparser.py',301),
  ('expression -> expression % expression','expression',3,'p_expression_binary_op','cparser.py',302),
  ('expression -> expression | expression','expression',3,'p_expression_binary_op','cparser.py',303),
  ('expression -> expression & expression','expression',3,'p_expression_binary_op','cparser.py',304),
  ('expression -> expression ^ expression','expression',3,'p_expression_binary_op','cparser.py',305),
  ('expression -> expression AND expression','expression',3,'p_expression_binary_op','cparser.py',306),
  ('expression -> expression OR expression','expression',3,'p_expression_binary_op','cparser.py',307),
  ('expression -> expression SHL expression','expression',3,'p_expression_binary_op','cparser.py',308),
  ('expression -> expression SHR expression','expression',3,'p_expression_binary_op','cparser.py',309),
  ('expression -> expression EQ expression','expression',3,'p_expression_binary_op','cparser.py',310),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binary_op','cparser.py',311),
  ('expression -> expression > expression','expression',3,'p_expression_binary_op','cparser.py',312),
  ('expression -> expression < expression','expression',3,'p_expression_binary_op','cparser.py',313),
  ('expression -> expression LE expression','expression',3,'p_expression_binary_op','cparser.py',314),
  ('expression -> expression GE expression','expression',3,'p_expression_binary_op','cparser.py',315),
  ('expr_list_or_empty -> expr_list','expr_list_or_empty',1,'p_expr_list_non_empty','cparser.py',320),
  ('expr_list_or_empty -> <empty>','expr_list_or_empty',0,'p_expr_list_empty','cparser.py',324),
  ('expr_list -> expr_list , expression','expr_list',3,'p_expr_list','cparser.py',328),
  ('expr_list -> expression','expr_list',1,'p_expr_list_single','cparser.py',332),
  ('fundefs -> fundefs fundef','fundefs',2,'p_fundefs','cparser.py',344),
  ('fundefs -> fundef','fundefs',1,'p_fundefs_single','cparser.py',348),
  ('fundefs -> <empty>','fundefs',0,'p_fundefs_empty','cparser.py',352),
  ('fundef -> TYPE ID ( args_list_or_empty ) compound_instr','fundef',6,'p_fundef','cparser.py',356),
  ('args_list_or_empty -> args_list','args_list_or_empty',1,'p_args_list_or_empty','cparser.py',360),
  ('args_list_or_empty -> <empty>','args_list_or_empty',0,'p_args_list_or_empty','cparser.py',361),
  ('args_list -> args_list , arg','args_list',3,'p_args_list','cparser.py',376),
  ('args_list -> arg','args_list',1,'p_args_list_single','cparser.py',380),
  ('arg -> TYPE ID','arg',2,'p_arg','cparser.py',384),
]
