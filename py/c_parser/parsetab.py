
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "nonassocIFXnonassocELSEright=leftORleftANDleft|left^left&nonassoc<>EQNEQLEGEleftSHLSHRleft+-left*/%AND EQ FLOAT GE ID INTEGER LE NEQ OR SHL SHR STRING TYPE BREAK CONTINUE IF ELSE RETURN WHILE FORprogram : ext_declarations fundefs instructionsext_declarations : declarationsdeclarations : declarations declarationdeclarations : declarationdeclarations :declaration : fundefsdeclaration : TYPE inits ';'declaration : error ';'inits : inits ',' initinits : initinit : ID '=' expressioninit : IDinstructions : instructions instructioninstructions : instructioninstruction : labeled_instr\n        | assignment ';'\n        | declaration\n        | choice_instr\n        | while_instr\n        | for_instr\n        | return_instr\n        | break_instr\n        | continue_instr\n        | compound_instr\n        | statement\n        | expression ';'statement : ID '(' expr_list_or_empty ')' ';'labeled_instr : ID ':' instructionassignment : ID '=' expressionassignment : ID '=' error ';'choice_instr : IF '(' condition ')' instruction  %prec IFXchoice_instr : IF '(' condition ')' instruction ELSE instructionchoice_instr : IF '(' error ')' instruction  %prec IFXchoice_instr : IF '(' error ')' instruction ELSE instructionwhile_instr : WHILE '(' condition ')' instructionfor_instr : FOR '(' instruction expression ';' assignment ')' instructionfor_instr : FOR '(' error ')' instructionwhile_instr : WHILE '(' error ')' instructionreturn_instr : RETURN expression ';'continue_instr : CONTINUE ';'break_instr : BREAK ';'compound_instr : '{' declarations instructions '}'compound_instr : '{' '}'condition : expressionconst : INTEGERconst : FLOATconst : STRINGexpression : constexpression : IDexpression : '(' expression ')'expression : '(' error ')'expression : ID '(' expr_list_or_empty ')'expression : ID '(' error ')'expression : expression '+' expression\n        | expression '-' expression\n        | expression '*' expression\n        | expression '/' expression\n        | expression '%' expression\n        | expression '|' expression\n        | expression '&' expression\n        | expression '^' expression\n        | expression AND expression\n        | expression OR expression\n        | expression SHL expression\n        | expression SHR expression\n        | expression EQ expression\n        | expression NEQ expression\n        | expression '>' expression\n        | expression '<' expression\n        | expression LE expression\n        | expression GE expressionexpr_list_or_empty : expr_listexpr_list_or_empty :expr_list : expr_list ',' expressionexpr_list : expressionfundefs : fundefs fundeffundefs : fundeffundefs :fundef : TYPE ID '(' args_list_or_empty ')' compound_instrargs_list_or_empty : args_list\n        |args_list : args_list ',' argargs_list : argarg : TYPE ID"
    
_lr_action_items = {'TYPE':([0,2,3,4,5,8,9,11,12,16,17,18,19,23,24,26,27,28,29,30,31,32,33,41,47,49,51,52,58,59,80,82,83,84,85,93,128,129,130,133,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[6,10,10,6,-4,-77,20,-76,-3,-8,6,-76,-14,-24,-15,-17,-18,-19,-20,-21,-22,-23,-25,6,-7,88,-13,6,-16,-26,6,-41,-40,6,-43,-28,-39,6,-3,88,6,6,6,6,6,-42,-79,-27,-31,-33,-35,-38,-37,6,6,-32,-34,6,-36,]),'error':([0,2,3,4,5,8,9,11,12,16,17,18,19,22,23,24,26,27,28,29,30,31,32,33,41,47,51,52,53,54,58,59,78,79,80,82,83,84,85,93,102,128,129,130,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[7,-78,-6,7,-4,-77,7,-76,-3,-8,7,-76,-14,56,-24,-15,-17,-18,-19,-20,-21,-22,-23,-25,7,-7,-13,7,95,97,-16,-26,122,125,127,-41,-40,7,-43,-28,97,-39,7,-3,7,7,7,7,7,-42,-79,-27,-31,-33,-35,-38,-37,7,7,-32,-34,7,-36,]),'ID':([0,2,3,4,5,6,8,9,10,11,12,16,17,18,19,20,22,23,24,26,27,28,29,30,31,32,33,38,41,47,48,50,51,52,53,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,88,93,102,126,128,129,130,137,139,140,141,142,144,145,146,148,151,152,153,154,155,156,157,158,161,162,163,164,],[-5,-78,-6,-2,-4,14,-77,21,46,-76,-3,-8,21,-76,-14,14,57,-24,-15,-17,-18,-19,-20,-21,-22,-23,-25,57,-5,-7,87,57,-13,21,57,57,-16,-26,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,21,-41,-40,21,-43,131,-28,57,57,-39,21,-3,57,21,21,21,21,21,-42,-79,-27,-31,-33,-35,-38,160,-37,21,21,-32,-34,21,-36,]),'IF':([0,2,3,4,5,8,9,11,12,16,17,18,19,23,24,26,27,28,29,30,31,32,33,41,47,51,52,58,59,80,82,83,84,85,93,128,129,130,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-78,-6,-2,-4,-77,35,-76,-3,-8,35,-76,-14,-24,-15,-17,-18,-19,-20,-21,-22,-23,-25,-5,-7,-13,35,-16,-26,35,-41,-40,35,-43,-28,-39,35,-3,35,35,35,35,35,-42,-79,-27,-31,-33,-35,-38,-37,35,35,-32,-34,35,-36,]),'WHILE':([0,2,3,4,5,8,9,11,12,16,17,18,19,23,24,26,27,28,29,30,31,32,33,41,47,51,52,58,59,80,82,83,84,85,93,128,129,130,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-78,-6,-2,-4,-77,36,-76,-3,-8,36,-76,-14,-24,-15,-17,-18,-19,-20,-21,-22,-23,-25,-5,-7,-13,36,-16,-26,36,-41,-40,36,-43,-28,-39,36,-3,36,36,36,36,36,-42,-79,-27,-31,-33,-35,-38,-37,36,36,-32,-34,36,-36,]),'FOR':([0,2,3,4,5,8,9,11,12,16,17,18,19,23,24,26,27,28,29,30,31,32,33,41,47,51,52,58,59,80,82,83,84,85,93,128,129,130,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-78,-6,-2,-4,-77,37,-76,-3,-8,37,-76,-14,-24,-15,-17,-18,-19,-20,-21,-22,-23,-25,-5,-7,-13,37,-16,-26,37,-41,-40,37,-43,-28,-39,37,-3,37,37,37,37,37,-42,-79,-27,-31,-33,-35,-38,-37,37,37,-32,-34,37,-36,]),'RETURN':([0,2,3,4,5,8,9,11,12,16,17,18,19,23,24,26,27,28,29,30,31,32,33,41,47,51,52,58,59,80,82,83,84,85,93,128,129,130,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-78,-6,-2,-4,-77,38,-76,-3,-8,38,-76,-14,-24,-15,-17,-18,-19,-20,-21,-22,-23,-25,-5,-7,-13,38,-16,-26,38,-41,-40,38,-43,-28,-39,38,-3,38,38,38,38,38,-42,-79,-27,-31,-33,-35,-38,-37,38,38,-32,-34,38,-36,]),'BREAK':([0,2,3,4,5,8,9,11,12,16,17,18,19,23,24,26,27,28,29,30,31,32,33,41,47,51,52,58,59,80,82,83,84,85,93,128,129,130,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-78,-6,-2,-4,-77,39,-76,-3,-8,39,-76,-14,-24,-15,-17,-18,-19,-20,-21,-22,-23,-25,-5,-7,-13,39,-16,-26,39,-41,-40,39,-43,-28,-39,39,-3,39,39,39,39,39,-42,-79,-27,-31,-33,-35,-38,-37,39,39,-32,-34,39,-36,]),'CONTINUE':([0,2,3,4,5,8,9,11,12,16,17,18,19,23,24,26,27,28,29,30,31,32,33,41,47,51,52,58,59,80,82,83,84,85,93,128,129,130,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-78,-6,-2,-4,-77,40,-76,-3,-8,40,-76,-14,-24,-15,-17,-18,-19,-20,-21,-22,-23,-25,-5,-7,-13,40,-16,-26,40,-41,-40,40,-43,-28,-39,40,-3,40,40,40,40,40,-42,-79,-27,-31,-33,-35,-38,-37,40,40,-32,-34,40,-36,]),'{':([0,2,3,4,5,8,9,11,12,16,17,18,19,23,24,26,27,28,29,30,31,32,33,41,47,51,52,58,59,80,82,83,84,85,93,128,129,130,132,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-78,-6,-2,-4,-77,41,-76,-3,-8,41,-76,-14,-24,-15,-17,-18,-19,-20,-21,-22,-23,-25,-5,-7,-13,41,-16,-26,41,-41,-40,41,-43,-28,-39,41,-3,41,41,41,41,41,41,-42,-79,-27,-31,-33,-35,-38,-37,41,41,-32,-34,41,-36,]),'(':([0,2,3,4,5,8,9,11,12,14,16,17,18,19,21,22,23,24,26,27,28,29,30,31,32,33,35,36,37,38,41,46,47,50,51,52,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,93,102,126,128,129,130,137,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-78,-6,-2,-4,-77,22,-76,-3,49,-8,22,-76,-14,54,22,-24,-15,-17,-18,-19,-20,-21,-22,-23,-25,78,79,80,22,-5,49,-7,22,-13,22,22,22,102,-16,-26,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-41,-40,22,-43,-28,22,22,-39,22,-3,22,22,22,22,22,22,-42,-79,-27,-31,-33,-35,-38,-37,22,22,-32,-34,22,-36,]),'INTEGER':([0,2,3,4,5,8,9,11,12,16,17,18,19,22,23,24,26,27,28,29,30,31,32,33,38,41,47,50,51,52,53,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,93,102,126,128,129,130,137,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-78,-6,-2,-4,-77,43,-76,-3,-8,43,-76,-14,43,-24,-15,-17,-18,-19,-20,-21,-22,-23,-25,43,-5,-7,43,-13,43,43,43,-16,-26,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-41,-40,43,-43,-28,43,43,-39,43,-3,43,43,43,43,43,43,-42,-79,-27,-31,-33,-35,-38,-37,43,43,-32,-34,43,-36,]),'FLOAT':([0,2,3,4,5,8,9,11,12,16,17,18,19,22,23,24,26,27,28,29,30,31,32,33,38,41,47,50,51,52,53,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,93,102,126,128,129,130,137,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-78,-6,-2,-4,-77,44,-76,-3,-8,44,-76,-14,44,-24,-15,-17,-18,-19,-20,-21,-22,-23,-25,44,-5,-7,44,-13,44,44,44,-16,-26,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-41,-40,44,-43,-28,44,44,-39,44,-3,44,44,44,44,44,44,-42,-79,-27,-31,-33,-35,-38,-37,44,44,-32,-34,44,-36,]),'STRING':([0,2,3,4,5,8,9,11,12,16,17,18,19,22,23,24,26,27,28,29,30,31,32,33,38,41,47,50,51,52,53,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,84,85,93,102,126,128,129,130,137,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,-78,-6,-2,-4,-77,45,-76,-3,-8,45,-76,-14,45,-24,-15,-17,-18,-19,-20,-21,-22,-23,-25,45,-5,-7,45,-13,45,45,45,-16,-26,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-41,-40,45,-43,-28,45,45,-39,45,-3,45,45,45,45,45,45,-42,-79,-27,-31,-33,-35,-38,-37,45,45,-32,-34,45,-36,]),'$end':([0,1,2,3,4,5,8,9,11,12,16,17,18,19,23,24,26,27,28,29,30,31,32,33,47,51,52,58,59,82,83,85,93,128,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-5,0,-78,-6,-2,-4,-77,-78,-76,-3,-8,-1,-76,-14,-24,-15,-17,-18,-19,-20,-21,-22,-23,-25,-7,-13,-78,-16,-26,-41,-40,-43,-28,-39,-78,-78,-78,-78,-78,-42,-79,-27,-31,-33,-35,-38,-37,-78,-78,-32,-34,-78,-36,]),'}':([3,5,8,11,16,19,23,24,26,27,28,29,30,31,32,33,41,47,51,52,58,59,82,83,84,85,93,128,129,130,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-6,-4,-77,-76,-8,-14,-24,-15,-17,-18,-19,-20,-21,-22,-23,-25,85,-7,-13,-78,-16,-26,-41,-40,-78,-43,-28,-39,145,-3,-78,-78,-78,-78,-78,-42,-79,-27,-31,-33,-35,-38,-37,-78,-78,-32,-34,-78,-36,]),'ELSE':([3,8,11,16,23,24,26,27,28,29,30,31,32,33,47,52,58,59,82,83,85,93,128,139,140,141,142,144,145,146,148,151,152,153,154,156,157,158,161,162,163,164,],[-6,-77,-76,-8,-24,-15,-17,-18,-19,-20,-21,-22,-23,-25,-7,-78,-16,-26,-41,-40,-43,-28,-39,-78,-78,-78,-78,-78,-42,-79,-27,157,158,-35,-38,-37,-78,-78,-32,-34,-78,-36,]),';':([7,13,14,15,21,25,34,39,40,42,43,44,45,57,81,86,87,92,94,95,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,127,134,135,136,143,150,],[16,47,-12,-10,-49,58,59,82,83,-48,-45,-46,-47,-49,128,-9,-12,-11,-29,134,-50,-51,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,16,-30,148,-53,155,-52,]),',':([13,14,15,42,43,44,45,57,86,87,90,91,92,98,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,131,136,147,149,150,],[48,-12,-10,-48,-45,-46,-47,-49,-9,-12,133,-83,-11,137,-75,-50,-51,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-84,-53,-82,-74,-52,]),'=':([14,21,87,160,],[50,53,50,53,]),':':([21,],[52,]),'+':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-49,60,-48,-45,-46,-47,60,-49,60,60,60,60,-50,-51,-54,-55,-56,-57,-58,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-52,-53,60,60,-52,]),'-':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-49,61,-48,-45,-46,-47,61,-49,61,61,61,61,-50,-51,-54,-55,-56,-57,-58,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-52,-53,61,61,-52,]),'*':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-49,62,-48,-45,-46,-47,62,-49,62,62,62,62,-50,-51,62,62,-56,-57,-58,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-52,-53,62,62,-52,]),'/':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-49,63,-48,-45,-46,-47,63,-49,63,63,63,63,-50,-51,63,63,-56,-57,-58,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-52,-53,63,63,-52,]),'%':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-49,64,-48,-45,-46,-47,64,-49,64,64,64,64,-50,-51,64,64,-56,-57,-58,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-52,-53,64,64,-52,]),'|':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-49,65,-48,-45,-46,-47,65,-49,65,65,65,65,-50,-51,-54,-55,-56,-57,-58,-59,-60,-61,65,65,-64,-65,-66,-67,-68,-69,-70,-71,65,-52,-53,65,65,-52,]),'&':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-49,66,-48,-45,-46,-47,66,-49,66,66,66,66,-50,-51,-54,-55,-56,-57,-58,66,-60,66,66,66,-64,-65,-66,-67,-68,-69,-70,-71,66,-52,-53,66,66,-52,]),'^':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-49,67,-48,-45,-46,-47,67,-49,67,67,67,67,-50,-51,-54,-55,-56,-57,-58,67,-60,-61,67,67,-64,-65,-66,-67,-68,-69,-70,-71,67,-52,-53,67,67,-52,]),'AND':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-49,68,-48,-45,-46,-47,68,-49,68,68,68,68,-50,-51,-54,-55,-56,-57,-58,-59,-60,-61,-62,68,-64,-65,-66,-67,-68,-69,-70,-71,68,-52,-53,68,68,-52,]),'OR':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-49,69,-48,-45,-46,-47,69,-49,69,69,69,69,-50,-51,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,69,-52,-53,69,69,-52,]),'SHL':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-49,70,-48,-45,-46,-47,70,-49,70,70,70,70,-50,-51,-54,-55,-56,-57,-58,70,70,70,70,70,-64,-65,70,70,70,70,70,70,70,-52,-53,70,70,-52,]),'SHR':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-49,71,-48,-45,-46,-47,71,-49,71,71,71,71,-50,-51,-54,-55,-56,-57,-58,71,71,71,71,71,-64,-65,71,71,71,71,71,71,71,-52,-53,71,71,-52,]),'EQ':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-49,72,-48,-45,-46,-47,72,-49,72,72,72,72,-50,-51,-54,-55,-56,-57,-58,72,72,72,72,72,-64,-65,None,None,None,None,None,None,72,-52,-53,72,72,-52,]),'NEQ':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-49,73,-48,-45,-46,-47,73,-49,73,73,73,73,-50,-51,-54,-55,-56,-57,-58,73,73,73,73,73,-64,-65,None,None,None,None,None,None,73,-52,-53,73,73,-52,]),'>':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-49,74,-48,-45,-46,-47,74,-49,74,74,74,74,-50,-51,-54,-55,-56,-57,-58,74,74,74,74,74,-64,-65,None,None,None,None,None,None,74,-52,-53,74,74,-52,]),'<':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-49,75,-48,-45,-46,-47,75,-49,75,75,75,75,-50,-51,-54,-55,-56,-57,-58,75,75,75,75,75,-64,-65,None,None,None,None,None,None,75,-52,-53,75,75,-52,]),'LE':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-49,76,-48,-45,-46,-47,76,-49,76,76,76,76,-50,-51,-54,-55,-56,-57,-58,76,76,76,76,76,-64,-65,None,None,None,None,None,None,76,-52,-53,76,76,-52,]),'GE':([21,34,42,43,44,45,55,57,81,92,94,99,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,135,136,143,149,150,],[-49,77,-48,-45,-46,-47,77,-49,77,77,77,77,-50,-51,-54,-55,-56,-57,-58,77,77,77,77,77,-64,-65,None,None,None,None,None,None,77,-52,-53,77,77,-52,]),')':([42,43,44,45,49,54,55,56,57,89,90,91,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,127,131,134,136,138,147,149,150,159,],[-48,-45,-46,-47,-81,-73,100,101,-49,132,-80,-83,-29,135,136,-72,-75,-50,-51,-73,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,139,140,-44,141,142,144,-84,-30,-53,150,-82,-74,-52,163,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'ext_declarations':([0,],[2,]),'fundefs':([0,2,4,9,17,41,52,80,84,129,139,140,141,142,144,157,158,163,],[3,9,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'declarations':([0,41,],[4,84,]),'declaration':([0,4,9,17,41,52,80,84,129,139,140,141,142,144,157,158,163,],[5,12,26,26,5,26,26,130,26,26,26,26,26,26,26,26,26,]),'fundef':([0,2,3,4,9,17,41,52,80,84,129,139,140,141,142,144,157,158,163,],[8,8,11,8,18,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'inits':([6,20,],[13,13,]),'init':([6,20,48,],[15,15,86,]),'instructions':([9,84,],[17,129,]),'instruction':([9,17,52,80,84,129,139,140,141,142,144,157,158,163,],[19,51,93,126,19,51,151,152,153,154,156,161,162,164,]),'compound_instr':([9,17,52,80,84,129,132,139,140,141,142,144,157,158,163,],[23,23,23,23,23,23,146,23,23,23,23,23,23,23,23,]),'labeled_instr':([9,17,52,80,84,129,139,140,141,142,144,157,158,163,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'assignment':([9,17,52,80,84,129,139,140,141,142,144,155,157,158,163,],[25,25,25,25,25,25,25,25,25,25,25,159,25,25,25,]),'choice_instr':([9,17,52,80,84,129,139,140,141,142,144,157,158,163,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'while_instr':([9,17,52,80,84,129,139,140,141,142,144,157,158,163,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'for_instr':([9,17,52,80,84,129,139,140,141,142,144,157,158,163,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'return_instr':([9,17,52,80,84,129,139,140,141,142,144,157,158,163,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'break_instr':([9,17,52,80,84,129,139,140,141,142,144,157,158,163,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'continue_instr':([9,17,52,80,84,129,139,140,141,142,144,157,158,163,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'statement':([9,17,52,80,84,129,139,140,141,142,144,157,158,163,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'expression':([9,17,22,38,50,52,53,54,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,102,126,129,137,139,140,141,142,144,157,158,163,],[34,34,55,81,92,34,94,99,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,123,34,34,99,143,34,149,34,34,34,34,34,34,34,34,]),'const':([9,17,22,38,50,52,53,54,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,102,126,129,137,139,140,141,142,144,157,158,163,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'args_list_or_empty':([49,],[89,]),'args_list':([49,],[90,]),'arg':([49,133,],[91,147,]),'expr_list_or_empty':([54,102,],[96,138,]),'expr_list':([54,102,],[98,98,]),'condition':([78,79,],[121,124,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> ext_declarations fundefs instructions','program',3,'p_program','Cparser.py',54),
  ('ext_declarations -> declarations','ext_declarations',1,'p_ext_declarations','Cparser.py',59),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','Cparser.py',63),
  ('declarations -> declaration','declarations',1,'p_declarations_single','Cparser.py',70),
  ('declarations -> <empty>','declarations',0,'p_declaration_blank','Cparser.py',77),
  ('declaration -> fundefs','declaration',1,'p_declaration_fundef','Cparser.py',81),
  ('declaration -> TYPE inits ;','declaration',3,'p_declaration','Cparser.py',85),
  ('declaration -> error ;','declaration',2,'p_declaration_error','Cparser.py',89),
  ('inits -> inits , init','inits',3,'p_inits','Cparser.py',93),
  ('inits -> init','inits',1,'p_inits_single','Cparser.py',97),
  ('init -> ID = expression','init',3,'p_init','Cparser.py',101),
  ('init -> ID','init',1,'p_init2','Cparser.py',105),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','Cparser.py',109),
  ('instructions -> instruction','instructions',1,'p_instructions_single','Cparser.py',116),
  ('instruction -> labeled_instr','instruction',1,'p_instruction','Cparser.py',123),
  ('instruction -> assignment ;','instruction',2,'p_instruction','Cparser.py',124),
  ('instruction -> declaration','instruction',1,'p_instruction','Cparser.py',125),
  ('instruction -> choice_instr','instruction',1,'p_instruction','Cparser.py',126),
  ('instruction -> while_instr','instruction',1,'p_instruction','Cparser.py',127),
  ('instruction -> for_instr','instruction',1,'p_instruction','Cparser.py',128),
  ('instruction -> return_instr','instruction',1,'p_instruction','Cparser.py',129),
  ('instruction -> break_instr','instruction',1,'p_instruction','Cparser.py',130),
  ('instruction -> continue_instr','instruction',1,'p_instruction','Cparser.py',131),
  ('instruction -> compound_instr','instruction',1,'p_instruction','Cparser.py',132),
  ('instruction -> statement','instruction',1,'p_instruction','Cparser.py',133),
  ('instruction -> expression ;','instruction',2,'p_instruction','Cparser.py',134),
  ('statement -> ID ( expr_list_or_empty ) ;','statement',5,'p_fun_call','Cparser.py',138),
  ('labeled_instr -> ID : instruction','labeled_instr',3,'p_labeled_instr','Cparser.py',142),
  ('assignment -> ID = expression','assignment',3,'p_assignment','Cparser.py',146),
  ('assignment -> ID = error ;','assignment',4,'p_assignment_error','Cparser.py',153),
  ('choice_instr -> IF ( condition ) instruction','choice_instr',5,'p_choice_instr','Cparser.py',157),
  ('choice_instr -> IF ( condition ) instruction ELSE instruction','choice_instr',7,'p_choice_instr_else','Cparser.py',161),
  ('choice_instr -> IF ( error ) instruction','choice_instr',5,'p_choice_instr_error','Cparser.py',165),
  ('choice_instr -> IF ( error ) instruction ELSE instruction','choice_instr',7,'p_choice_instr_else_error','Cparser.py',169),
  ('while_instr -> WHILE ( condition ) instruction','while_instr',5,'p_while_instr','Cparser.py',173),
  ('for_instr -> FOR ( instruction expression ; assignment ) instruction','for_instr',8,'p_for_instr','Cparser.py',177),
  ('for_instr -> FOR ( error ) instruction','for_instr',5,'p_for_error','Cparser.py',181),
  ('while_instr -> WHILE ( error ) instruction','while_instr',5,'p_while_error','Cparser.py',185),
  ('return_instr -> RETURN expression ;','return_instr',3,'p_return_instr','Cparser.py',189),
  ('continue_instr -> CONTINUE ;','continue_instr',2,'p_continue_instr','Cparser.py',193),
  ('break_instr -> BREAK ;','break_instr',2,'p_break_instr','Cparser.py',197),
  ('compound_instr -> { declarations instructions }','compound_instr',4,'p_compound_instr','Cparser.py',201),
  ('compound_instr -> { }','compound_instr',2,'p_compound_instr2','Cparser.py',205),
  ('condition -> expression','condition',1,'p_condition','Cparser.py',209),
  ('const -> INTEGER','const',1,'p_const_integer','Cparser.py',213),
  ('const -> FLOAT','const',1,'p_const_float','Cparser.py',217),
  ('const -> STRING','const',1,'p_const_string','Cparser.py',221),
  ('expression -> const','expression',1,'p_expression_const','Cparser.py',225),
  ('expression -> ID','expression',1,'p_expression_id','Cparser.py',229),
  ('expression -> ( expression )','expression',3,'p_expression_brackets','Cparser.py',235),
  ('expression -> ( error )','expression',3,'p_expression_brackets_error','Cparser.py',239),
  ('expression -> ID ( expr_list_or_empty )','expression',4,'p_expression_fun_call','Cparser.py',243),
  ('expression -> ID ( error )','expression',4,'p_expression_fun_call_error','Cparser.py',247),
  ('expression -> expression + expression','expression',3,'p_expression_binary_op','Cparser.py',251),
  ('expression -> expression - expression','expression',3,'p_expression_binary_op','Cparser.py',252),
  ('expression -> expression * expression','expression',3,'p_expression_binary_op','Cparser.py',253),
  ('expression -> expression / expression','expression',3,'p_expression_binary_op','Cparser.py',254),
  ('expression -> expression % expression','expression',3,'p_expression_binary_op','Cparser.py',255),
  ('expression -> expression | expression','expression',3,'p_expression_binary_op','Cparser.py',256),
  ('expression -> expression & expression','expression',3,'p_expression_binary_op','Cparser.py',257),
  ('expression -> expression ^ expression','expression',3,'p_expression_binary_op','Cparser.py',258),
  ('expression -> expression AND expression','expression',3,'p_expression_binary_op','Cparser.py',259),
  ('expression -> expression OR expression','expression',3,'p_expression_binary_op','Cparser.py',260),
  ('expression -> expression SHL expression','expression',3,'p_expression_binary_op','Cparser.py',261),
  ('expression -> expression SHR expression','expression',3,'p_expression_binary_op','Cparser.py',262),
  ('expression -> expression EQ expression','expression',3,'p_expression_binary_op','Cparser.py',263),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binary_op','Cparser.py',264),
  ('expression -> expression > expression','expression',3,'p_expression_binary_op','Cparser.py',265),
  ('expression -> expression < expression','expression',3,'p_expression_binary_op','Cparser.py',266),
  ('expression -> expression LE expression','expression',3,'p_expression_binary_op','Cparser.py',267),
  ('expression -> expression GE expression','expression',3,'p_expression_binary_op','Cparser.py',268),
  ('expr_list_or_empty -> expr_list','expr_list_or_empty',1,'p_expr_list_non_empty','Cparser.py',273),
  ('expr_list_or_empty -> <empty>','expr_list_or_empty',0,'p_expr_list_empty','Cparser.py',277),
  ('expr_list -> expr_list , expression','expr_list',3,'p_expr_list','Cparser.py',281),
  ('expr_list -> expression','expr_list',1,'p_expr_list_single','Cparser.py',285),
  ('fundefs -> fundefs fundef','fundefs',2,'p_fundefs','Cparser.py',297),
  ('fundefs -> fundef','fundefs',1,'p_fundefs_single','Cparser.py',301),
  ('fundefs -> <empty>','fundefs',0,'p_fundefs_empty','Cparser.py',305),
  ('fundef -> TYPE ID ( args_list_or_empty ) compound_instr','fundef',6,'p_fundef','Cparser.py',309),
  ('args_list_or_empty -> args_list','args_list_or_empty',1,'p_args_list_or_empty','Cparser.py',313),
  ('args_list_or_empty -> <empty>','args_list_or_empty',0,'p_args_list_or_empty','Cparser.py',314),
  ('args_list -> args_list , arg','args_list',3,'p_args_list','Cparser.py',329),
  ('args_list -> arg','args_list',1,'p_args_list_single','Cparser.py',333),
  ('arg -> TYPE ID','arg',2,'p_arg','Cparser.py',337),
]
